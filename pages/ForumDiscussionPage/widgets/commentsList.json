{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 181,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{commentsJSObject1.customWidgetData.data}}",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "onResetClick"
    },
    {
      "key": "onReplySubmission"
    }
  ],
  "events": [
    "onResetClick",
    "onReplySubmission"
  ],
  "isCanvas": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "44k5s12njn",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 49,
  "mobileLeftColumn": 8,
  "mobileRightColumn": 31,
  "mobileTopRow": 19,
  "needsErrorInfo": false,
  "onReplySubmission": "{{add_comment.run().then(() => {\n  commentsJSObject1.customWidgetData();\n  resetWidget(\"\", true);\n});}}",
  "onResetClick": "{{showAlert('Successfully reset!!', '');}}",
  "originalBottomRow": 33,
  "originalTopRow": 15,
  "parentColumnSpace": 17.9375,
  "parentId": "0",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 62,
  "shouldScrollContents": true,
  "srcDoc": {
    "css": "#comments-container {\n  padding: 20px; /* Add padding to the container */\n  box-sizing: border-box; /* Ensure padding is included in the container's width/height */\n  overflow: hidden; /* Hide any overflow from scaling */\n}\n\n.comment {\n  margin-bottom: 10px;\n  margin-top: 3px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Added shadow */\n  transition: transform 0.2s, box-shadow 0.2s; /* Smooth transition for scale and shadow */\n  display: flex; /* Flexbox layout */\n  flex-direction: column;\n  position: relative;\n}\n\n.comment:hover {\n  transform: scale(1.03); /* Slightly scales up the comment on hover */\n  box-shadow: 0 2px 4px rgba(0, 0, 255, 0.2); /* Increase shadow on hover */\n}\n\n.comment-reply {\n  margin-left: 20px;\n  border-left: 2px solid #ddd;\n  padding-left: 15px;\n  position: relative;\n}\n\n/* Ensure the top-level comment also has a visible line to show the stretch */\n.comment-reply::before {\n  content: \"\";\n  position: absolute;\n  left: -15px;\n  top: 0;\n  bottom: 0;\n  width: 2px;\n  background-color: #9c27b0;\n  z-index: -1;\n}\n\n.comment-user {\n  font-weight: bold;\n  color: #9c27b0;\n  display: inline; /* Display inline to align with comment text */\n}\n\n.comment-text {\n  display: inline; /* Display inline to align with user name */\n  margin-left: 5px; /* Space between user name and comment text */\n}\n\n.comment-date {\n  margin-top: 5px;\n  margin-bottom: 5px;\n  font-style: italic; /* Make the date italic */\n  color: #888; /* Optional: change color of the date */\n  font-size: 0.85em; /* Smaller font size for date */\n}\n\n.reply-button {\n  bottom: 10px; /* Distance from the bottom */\n  left: 10px; /* Distance from the left */\n  width: 60px; /* Fixed width */\n  padding: 2px; /* Adjusted padding */\n  border: none;\n  border-radius: 3px; /* Rounded corners */\n  background-color: #d3d3d3; /* Grey background */\n  color: black;\n  cursor: pointer;\n  font-size: 0.7em; /* Smaller font size */\n  text-align: center; /* Center text horizontally */\n  line-height: 1.2; /* Adjust line height if needed */\n  transition: background-color 0.2s;\n}\n\n.reply-button:hover {\n  background-color: #9c27b0; /* Theme purple on hover */\n  color: white;\n}\n\n.reply-form {\n  margin-top: 10px;\n}\n\n.reply-textbox {\n  width: 100%;\n  height: 50px;\n  margin-bottom: 5px;\n  padding: 5px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  box-sizing: border-box;\n}\n\n.submit-reply-button {\n  padding: 3px 20px;\n  border: none;\n  border-radius: 3px;\n  background-color: #9c27b0;\n  font-size: 0.7em;\n  color: white;\n  cursor: pointer;\n  font-size: 0.8em;\n}\n\n.submit-reply-button:hover {\n  background-color: #7b1fa2;\n}\n\n/* Style for the new comment form container */\n.new-comment-form {\n  margin-bottom: 20px; /* Space between the form and comments */\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  background-color: #f9f9f9;\n}\n\n.new-comment-textbox {\n  width: 100%;\n  height: 50px;\n  margin-bottom: 10px;\n  padding: 5px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  box-sizing: border-box;\n}\n\n.add-comment-button {\n  padding: 5px 20px;\n  border: none;\n  border-radius: 3px;\n  background-color: #9c27b0;\n  color: white;\n  cursor: pointer;\n  font-size: 0.8em;\n  transition: background-color 0.2s;\n}\n\n.add-comment-button:hover {\n  background-color: #7b1fa2;\n}",
    "html": "<div id=\"comments-container\"></div>\n",
    "js": "let commentsData = appsmith.model.comments ? JSON.parse(appsmith.model.comments) : [];\nfunction addNewCommentForm(container) {\n  const formDiv = document.createElement('div');\n  formDiv.classList.add('new-comment-form');\n  formDiv.innerHTML = `\n        <textarea class=\"new-comment-textbox\" placeholder=\"Write your comment...\"></textarea>\n        <button class=\"add-comment-button\">Add Comment</button>\n    `;\n  container.insertBefore(formDiv, container.firstChild); // Insert the form at the top of the comments container\n\n  // Add event listener for the Add Comment button\n  const addCommentButton = formDiv.querySelector('.add-comment-button');\n  addCommentButton.addEventListener('click', () => {\n    const commentText = formDiv.querySelector('.new-comment-textbox').value;\n    if (commentText) {\n      handleNewCommentSubmit(commentText); // Handle the submission of the new comment\n    }\n  });\n}\n\n// Handle the submission of the new comment\nfunction handleNewCommentSubmit(commentText) {\n  const comments = JSON.parse(appsmith.model.comments);\n  const newComment = {\n    id: getMaxId(comments),\n    // Correctly generate a new unique ID\n    parent_comment_id: null,\n    // Top-level comment\n    forum_id: appsmith.model.forum_id,\n    user_id: appsmith.model.user.user_id,\n    comment: commentText,\n    created_at: new Date().toISOString(),\n    user_name: appsmith.model.user.name,\n    replies: [] // Initialize the replies array\n  };\n\n  // Add the new comment to the top level of the comment list\n  comments.unshift(newComment);\n\n  // Update the model with the new comments array\n  appsmith.updateModel({\n    comments: JSON.stringify(comments)\n  });\n\n  // Rebuild and re-render the comment hierarchy\n  const commentsHierarchy = buildCommentHierarchy(comments);\n  const commentsContainer = document.getElementById('comments-container');\n  commentsContainer.innerHTML = ''; // Clear previous content\n  renderComments(commentsHierarchy, commentsContainer);\n\n  // Re-add the new comment form at the top\n  addNewCommentForm(commentsContainer);\n}\n\n// Function to get the next available comment ID\nfunction getMaxId(comments) {\n  let maxId = 0;\n  function traverse(commentList) {\n    commentList.forEach(comment => {\n      maxId = Math.max(maxId, comment.id);\n      if (comment.replies && comment.replies.length > 0) {\n        traverse(comment.replies);\n      }\n    });\n  }\n  traverse(comments);\n  return maxId + 1; // Increment by 1 to get the next available ID\n}\n\n// Function to find and update the comment tree with the new reply\nfunction addReplyToComments(comment, parent_id, comments) {\n  for (let i = 0; i < comments.length; i++) {\n    const currentComment = comments[i];\n    if (currentComment.id === parent_id) {\n      currentComment.replies = currentComment.replies || [];\n      currentComment.replies.push(comment);\n      return; // Exit once the reply is added\n    }\n    if (currentComment.replies && currentComment.replies.length > 0) {\n      addReplyToComments(comment, parent_id, currentComment.replies);\n    }\n  }\n}\n\n// Handles the submission of a reply\nconst handleSubmit = (commentText, parent_id) => {\n  const comments = JSON.parse(appsmith.model.comments); // Always work with the full comment tree\n\n  const newComment = {\n    id: getMaxId(comments),\n    // Correctly generate a new unique ID\n    parent_comment_id: parent_id,\n    forum_id: appsmith.model.forum_id,\n    user_id: appsmith.model.user.user_id,\n    comment: commentText,\n    created_at: new Date().toISOString(),\n    user_name: appsmith.model.user.name,\n    replies: [] // Initialize the replies array\n  };\n\n  // Add the new reply to the appropriate parent comment\n  addReplyToComments(newComment, parent_id, comments);\n\n  // Update the model with the new comments array\n  appsmith.updateModel({\n    comments: JSON.stringify(comments)\n  });\n\n  // Rebuild and re-render the comment hierarchy\n  const commentsHierarchy = buildCommentHierarchy(comments);\n  const commentsContainer = document.getElementById('comments-container');\n  commentsContainer.innerHTML = ''; // Clear previous content\n  addNewCommentForm(commentsContainer);\n  renderComments(commentsHierarchy, commentsContainer);\n};\n\n// Organize comments by their ID and build the hierarchy\nfunction buildCommentHierarchy(comments) {\n  const commentMap = {};\n\n  // Initialize the comment map\n  comments.forEach(comment => {\n    commentMap[comment.id] = {\n      ...comment,\n      replies: comment.replies || []\n    };\n  });\n\n  // Link child comments to their parent\n  comments.forEach(comment => {\n    if (comment.parent_comment_id !== null && commentMap[comment.parent_comment_id]) {\n      commentMap[comment.parent_comment_id].replies.push(commentMap[comment.id]);\n    }\n  });\n\n  // Extract the top-level comments (where parent_comment_id is null)\n  return comments.filter(comment => comment.parent_comment_id === null).map(comment => commentMap[comment.id]);\n}\n\n// Function to remove any existing reply forms\nfunction removeExistingReplyForm() {\n  const existingForm = document.querySelector('.reply-form');\n  if (existingForm) {\n    existingForm.remove();\n  }\n}\n\n// Render the comment tree recursively\nfunction renderComments(comments, container) {\n  comments.forEach(comment => {\n    const commentDiv = document.createElement('div');\n    commentDiv.classList.add('comment');\n    if (comment.parent_comment_id !== null) {\n      commentDiv.classList.add('comment-reply');\n    }\n\n    // Add comment content - wrapped in a single enclosing div\n    commentDiv.innerHTML = `\n            <div>\n                <div>\n                    <span class=\"comment-user\">${comment.user_name}:</span>\n                    <span class=\"comment-text\">${comment.comment}</span>\n                </div>\n                <div class=\"comment-date\">${new Date(comment.created_at).toLocaleDateString()} ${new Date(comment.created_at).toLocaleTimeString()}</div>\n                <button class=\"reply-button\">Reply</button>\n            </div>\n        `;\n    container.appendChild(commentDiv);\n\n    // Recursively render replies\n    if (comment.replies && comment.replies.length > 0) {\n      renderComments(comment.replies, commentDiv);\n    }\n\n    // Add event listener for reply button\n    const replyButton = commentDiv.querySelector('.reply-button');\n    replyButton.addEventListener('click', () => {\n      removeExistingReplyForm(); // Remove any existing reply forms\n\n      const replyFormDiv = document.createElement('div');\n      replyFormDiv.classList.add('reply-form');\n      replyFormDiv.innerHTML = `\n                <textarea class=\"reply-textbox\" placeholder=\"Write your reply...\"></textarea>\n                <button class=\"submit-reply-button\">Submit</button>\n            `;\n\n      // Insert the reply form directly after the comment content, but before any child comments\n      commentDiv.querySelector('div').insertAdjacentElement('afterend', replyFormDiv);\n\n      // Add event listener for submit button\n      const submitReplyButton = replyFormDiv.querySelector('.submit-reply-button');\n      submitReplyButton.addEventListener('click', () => {\n        const replyText = replyFormDiv.querySelector('.reply-textbox').value;\n        if (replyText) {\n          handleSubmit(replyText, comment.id);\n          removeExistingReplyForm();\n          alert(`Reply submitted: ${replyText} (Parent Comment ID: ${comment.id})`);\n        }\n      });\n    });\n  });\n}\n\n// Initialize the rendering on app load\nappsmith.onReady(() => {\n  const commentsData = appsmith.model.comments ? JSON.parse(appsmith.model.comments) : [];\n  const commentsHierarchy = buildCommentHierarchy(commentsData);\n  const commentsContainer = document.getElementById('comments-container');\n  addNewCommentForm(commentsContainer);\n  renderComments(commentsHierarchy, commentsContainer);\n});\n\n// Initial rendering call\nconst commentsHierarchy = buildCommentHierarchy(commentsData);\nconst commentsContainer = document.getElementById('comments-container');\nrenderComments(commentsHierarchy, commentsContainer);"
  },
  "theme": "{{appsmith.theme}}",
  "topRow": 15,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": "#comments-container {\n  padding: 20px; /* Add padding to the container */\n  box-sizing: border-box; /* Ensure padding is included in the container's width/height */\n  overflow: hidden; /* Hide any overflow from scaling */\n}\n\n.comment {\n  margin-bottom: 10px;\n  margin-top: 3px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Added shadow */\n  transition: transform 0.2s, box-shadow 0.2s; /* Smooth transition for scale and shadow */\n  display: flex; /* Flexbox layout */\n  flex-direction: column;\n  position: relative;\n}\n\n.comment:hover {\n  transform: scale(1.03); /* Slightly scales up the comment on hover */\n  box-shadow: 0 2px 4px rgba(0, 0, 255, 0.2); /* Increase shadow on hover */\n}\n\n.comment-reply {\n  margin-left: 20px;\n  border-left: 2px solid #ddd;\n  padding-left: 15px;\n  position: relative;\n}\n\n/* Ensure the top-level comment also has a visible line to show the stretch */\n.comment-reply::before {\n  content: '';\n  position: absolute;\n  left: -15px; \n  top: 0;\n  bottom: 0;\n  width: 2px;\n  background-color: #9c27b0;\n  z-index: -1; \n}\n\n.comment-user {\n  font-weight: bold;\n  color: #9c27b0;\n  display: inline; /* Display inline to align with comment text */\n}\n\n.comment-text {\n  display: inline; /* Display inline to align with user name */\n  margin-left: 5px; /* Space between user name and comment text */\n}\n\n.comment-date {\n  margin-top: 5px;\n  margin-bottom: 5px;\n  font-style: italic; /* Make the date italic */\n  color: #888; /* Optional: change color of the date */\n  font-size: 0.85em; /* Smaller font size for date */\n}\n\n.reply-button { \n  bottom: 10px; /* Distance from the bottom */\n  left: 10px; /* Distance from the left */\n  width: 60px; /* Fixed width */\n  padding: 2px; /* Adjusted padding */\n  border: none;\n  border-radius: 3px; /* Rounded corners */\n  background-color: #d3d3d3; /* Grey background */\n  color: black;\n  cursor: pointer;\n  font-size: 0.7em; /* Smaller font size */\n  text-align: center; /* Center text horizontally */\n  line-height: 1.2; /* Adjust line height if needed */\n  transition: background-color 0.2s;\n}\n\n.reply-button:hover {\n  background-color: #9c27b0; /* Theme purple on hover */\n  color: white;\n}\n\n.reply-form {\n  margin-top: 10px;\n}\n\n.reply-textbox {\n  width: 100%;\n  height: 50px;\n  margin-bottom: 5px;\n  padding: 5px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  box-sizing: border-box;\n}\n\n.submit-reply-button {\n  padding: 3px 20px;\n  border: none;\n  border-radius: 3px;\n  background-color: #9c27b0;\n\tfont-size: 0.7em;\n  color: white;\n  cursor: pointer;\n  font-size: 0.8em;\n}\n\n.submit-reply-button:hover {\n  background-color: #7b1fa2;\n}\n\n\n\n\n/* Style for the new comment form container */\n.new-comment-form {\n  margin-bottom: 20px; /* Space between the form and comments */\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  background-color: #f9f9f9;\n}\n\n.new-comment-textbox {\n  width: 100%;\n  height: 50px;\n  margin-bottom: 10px;\n  padding: 5px;\n  border: 1px solid #ddd;\n  border-radius: 3px;\n  box-sizing: border-box;\n}\n\n.add-comment-button {\n  padding: 5px 20px;\n  border: none;\n  border-radius: 3px;\n  background-color: #9c27b0;\n  color: white;\n  cursor: pointer;\n  font-size: 0.8em;\n  transition: background-color 0.2s;\n}\n\n.add-comment-button:hover {\n  background-color: #7b1fa2;\n}\n\n\n",
    "html": "<div id=\"comments-container\"></div>\n",
    "js": "let commentsData = appsmith.model.comments ? JSON.parse(appsmith.model.comments) : [];\n\n\n\n\nfunction addNewCommentForm(container) {\n    const formDiv = document.createElement('div');\n    formDiv.classList.add('new-comment-form');\n    formDiv.innerHTML = `\n        <textarea class=\"new-comment-textbox\" placeholder=\"Write your comment...\"></textarea>\n        <button class=\"add-comment-button\">Add Comment</button>\n    `;\n\n    container.insertBefore(formDiv, container.firstChild); // Insert the form at the top of the comments container\n\n    // Add event listener for the Add Comment button\n    const addCommentButton = formDiv.querySelector('.add-comment-button');\n    addCommentButton.addEventListener('click', () => {\n        const commentText = formDiv.querySelector('.new-comment-textbox').value;\n        if (commentText) {\n            handleNewCommentSubmit(commentText); // Handle the submission of the new comment\n        }\n    });\n}\n\n// Handle the submission of the new comment\nfunction handleNewCommentSubmit(commentText) {\n    const comments = JSON.parse(appsmith.model.comments);\n\n    const newComment = {\n        id: getMaxId(comments),  // Correctly generate a new unique ID\n        parent_comment_id: null,  // Top-level comment\n        forum_id: appsmith.model.forum_id,\n        user_id: appsmith.model.user.user_id,\n        comment: commentText,\n        created_at: new Date().toISOString(),\n        user_name: appsmith.model.user.name,\n        replies: []  // Initialize the replies array\n    };\n\t\n    // Add the new comment to the top level of the comment list\n    comments.unshift(newComment);\n\n    // Update the model with the new comments array\n    appsmith.updateModel({ comments: JSON.stringify(comments) });\n\n    // Rebuild and re-render the comment hierarchy\n    const commentsHierarchy = buildCommentHierarchy(comments);\n    const commentsContainer = document.getElementById('comments-container');\n    commentsContainer.innerHTML = ''; // Clear previous content\n    renderComments(commentsHierarchy, commentsContainer);\n\n    // Re-add the new comment form at the top\n    addNewCommentForm(commentsContainer);\n}\n\n\n\n// Function to get the next available comment ID\nfunction getMaxId(comments) {\n    let maxId = 0;\n    function traverse(commentList) {\n        commentList.forEach(comment => {\n            maxId = Math.max(maxId, comment.id);\n            if (comment.replies && comment.replies.length > 0) {\n                traverse(comment.replies);\n            }\n        });\n    }\n    traverse(comments);\n    return maxId + 1; // Increment by 1 to get the next available ID\n}\n\n// Function to find and update the comment tree with the new reply\nfunction addReplyToComments(comment, parent_id, comments) {\n    for (let i = 0; i < comments.length; i++) {\n        const currentComment = comments[i];\n        if (currentComment.id === parent_id) {\n            currentComment.replies = currentComment.replies || [];\n            currentComment.replies.push(comment);\n            return;  // Exit once the reply is added\n        }\n        if (currentComment.replies && currentComment.replies.length > 0) {\n            addReplyToComments(comment, parent_id, currentComment.replies);\n        }\n    }\n}\n\n// Handles the submission of a reply\nconst handleSubmit = (commentText, parent_id) => {\n    const comments = JSON.parse(appsmith.model.comments);  // Always work with the full comment tree\n\n    const newComment = {\n        id: getMaxId(comments),  // Correctly generate a new unique ID\n        parent_comment_id: parent_id,\n        forum_id: appsmith.model.forum_id,\n        user_id: appsmith.model.user.user_id,\n        comment: commentText,\n        created_at: new Date().toISOString(),\n        user_name: appsmith.model.user.name,\n        replies: []  // Initialize the replies array\n    };\n\n    // Add the new reply to the appropriate parent comment\n    addReplyToComments(newComment, parent_id, comments);\n\n    // Update the model with the new comments array\n    appsmith.updateModel({ comments: JSON.stringify(comments) });\n\n    // Rebuild and re-render the comment hierarchy\n    const commentsHierarchy = buildCommentHierarchy(comments);\n    const commentsContainer = document.getElementById('comments-container');\n    commentsContainer.innerHTML = ''; // Clear previous content\n\t\taddNewCommentForm(commentsContainer);\n    renderComments(commentsHierarchy, commentsContainer);\n};\n\n// Organize comments by their ID and build the hierarchy\nfunction buildCommentHierarchy(comments) {\n    const commentMap = {};\n\n    // Initialize the comment map\n    comments.forEach(comment => {\n        commentMap[comment.id] = { ...comment, replies: comment.replies || [] };\n    });\n\n    // Link child comments to their parent\n    comments.forEach(comment => {\n        if (comment.parent_comment_id !== null && commentMap[comment.parent_comment_id]) {\n            commentMap[comment.parent_comment_id].replies.push(commentMap[comment.id]);\n        }\n    });\n\n    // Extract the top-level comments (where parent_comment_id is null)\n    return comments.filter(comment => comment.parent_comment_id === null).map(comment => commentMap[comment.id]);\n}\n\n// Function to remove any existing reply forms\nfunction removeExistingReplyForm() {\n    const existingForm = document.querySelector('.reply-form');\n    if (existingForm) {\n        existingForm.remove();\n    }\n}\n\n// Render the comment tree recursively\nfunction renderComments(comments, container) {\n    comments.forEach(comment => {\n        const commentDiv = document.createElement('div');\n        commentDiv.classList.add('comment');\n        if (comment.parent_comment_id !== null) {\n            commentDiv.classList.add('comment-reply');\n        }\n\n        // Add comment content - wrapped in a single enclosing div\n        commentDiv.innerHTML = `\n            <div>\n                <div>\n                    <span class=\"comment-user\">${comment.user_name}:</span>\n                    <span class=\"comment-text\">${comment.comment}</span>\n                </div>\n                <div class=\"comment-date\">${new Date(comment.created_at).toLocaleDateString()} ${new Date(comment.created_at).toLocaleTimeString()}</div>\n                <button class=\"reply-button\">Reply</button>\n            </div>\n        `;\n\n        container.appendChild(commentDiv);\n\n        // Recursively render replies\n        if (comment.replies && comment.replies.length > 0) {\n            renderComments(comment.replies, commentDiv);\n        }\n\n        // Add event listener for reply button\n        const replyButton = commentDiv.querySelector('.reply-button');\n        replyButton.addEventListener('click', () => {\n            removeExistingReplyForm(); // Remove any existing reply forms\n\n            const replyFormDiv = document.createElement('div');\n            replyFormDiv.classList.add('reply-form');\n            replyFormDiv.innerHTML = `\n                <textarea class=\"reply-textbox\" placeholder=\"Write your reply...\"></textarea>\n                <button class=\"submit-reply-button\">Submit</button>\n            `;\n\n            // Insert the reply form directly after the comment content, but before any child comments\n            commentDiv.querySelector('div').insertAdjacentElement('afterend', replyFormDiv);\n\n            // Add event listener for submit button\n            const submitReplyButton = replyFormDiv.querySelector('.submit-reply-button');\n            submitReplyButton.addEventListener('click', () => {\n                const replyText = replyFormDiv.querySelector('.reply-textbox').value;\n                if (replyText) {\n                    handleSubmit(replyText, comment.id);\n                    removeExistingReplyForm();\n                    alert(`Reply submitted: ${replyText} (Parent Comment ID: ${comment.id})`);\n                }\n            });\n        });\n    });\n}\n\n// Initialize the rendering on app load\nappsmith.onReady(() => {\n    const commentsData = appsmith.model.comments ? JSON.parse(appsmith.model.comments) : [];\n  \n    const commentsHierarchy = buildCommentHierarchy(commentsData);\n    const commentsContainer = document.getElementById('comments-container');\n\t\taddNewCommentForm(commentsContainer);\n    renderComments(commentsHierarchy, commentsContainer);\n});\n\n// Initial rendering call\nconst commentsHierarchy = buildCommentHierarchy(commentsData);\nconst commentsContainer = document.getElementById('comments-container');\n\nrenderComments(commentsHierarchy, commentsContainer);\n"
  },
  "version": 1,
  "widgetId": "4uo97k4yd0",
  "widgetName": "commentsList"
}