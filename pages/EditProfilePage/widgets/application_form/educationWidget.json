{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#b91c1c",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "0",
  "bottomRow": 81,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{getEducationsJSObject.educationData.data}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [],
  "events": [],
  "hideCard": false,
  "iconSVG": "/static/media/icon.9b1065660dedd39cf997e3faa42244bc.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "uhy8eixu17",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 68,
  "mobileLeftColumn": 30,
  "mobileRightColumn": 53,
  "mobileTopRow": 38,
  "needsErrorInfo": false,
  "onCanvasUI": {
    "disableParentSelection": false,
    "focusBGCSSVar": "--on-canvas-ui-widget-focus",
    "focusColorCSSVar": "--on-canvas-ui-widget-selection",
    "selectionBGCSSVar": "--on-canvas-ui-widget-selection",
    "selectionColorCSSVar": "--on-canvas-ui-widget-focus"
  },
  "originalBottomRow": 81,
  "originalTopRow": 61,
  "parentColumnSpace": 18.880859375,
  "parentId": "hnice2rhm7",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ".education-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  overflow: hidden;\n}\n\n.education-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.education-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.school {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.specialization {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.date-started,\n.row2 input.date-ended {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.marks {\n  flex: 0.8;\n  font-size: 12px;\n}\n\n.remove-education-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-133%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-education-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-133%) scale(1.1);\n}\n\n.add-education-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #28a745;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-education-button:hover {\n  background-color: #218838;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n.currently-pursuing {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.currently-pursuing input[type=checkbox] {\n  margin-right: 5px;\n}\n\n.autocomplete-list {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 97%;\n  overflow-y: auto;\n  position: absolute;\n  top: 35%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-list li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-list li:hover {\n  background-color: #f0f0f0;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nappsmith.onReady(function () {\n  function EducationForm() {\n    const [educations, setEducations] = useState([{\n      school: '',\n      degree: '',\n      specialization: '',\n      startDate: '',\n      endDate: '',\n      marks: '',\n      currentlyPursuing: false\n    }]);\n    const [errors, setErrors] = useState([]);\n    const [schoolSuggestions, setSchoolSuggestions] = useState([]);\n    const [focusedIndex, setFocusedIndex] = useState(null);\n    useEffect(() => {\n      const fetchData = () => {\n        const initialEducations = appsmith.model.educations || [];\n        if (initialEducations.length) {\n          const formattedEducations = initialEducations.map(education => ({\n            school: education.institution_name || '',\n            degree: education.degree || '',\n            specialization: education.specialization || '',\n            startDate: education.start_date || '',\n            endDate: education.end_date || '',\n            marks: education.marks || '',\n            currentlyPursuing: !education.end_date\n          }));\n          setEducations(formattedEducations);\n        } else {\n          setTimeout(fetchData, 500);\n        }\n      };\n      fetchData();\n    }, []);\n\n    // Function to fetch schools based on user input\n    const fetchSchools = async input => {\n      const schools = appsmith.model.institutions.map(school => school.name) || [];\n      const filteredSchools = schools.filter(school => school.toLowerCase().includes(input.toLowerCase()));\n      setSchoolSuggestions(filteredSchools);\n    };\n    const validateFields = educations => {\n      const newErrors = educations.map(education => {\n        let errors = {};\n        if (!education.school) errors.school = 'School cannot be empty';\n        if (!education.startDate) errors.startDate = 'Start date cannot be empty';\n        if (!education.currentlyPursuing && !education.endDate) errors.endDate = 'End date cannot be empty';\n        return errors;\n      });\n      setErrors(newErrors);\n      return !newErrors.some(error => Object.keys(error).length > 0);\n    };\n    const handleInputChange = (index, event) => {\n      const {\n        name,\n        value,\n        type,\n        checked\n      } = event.target;\n      const newEducations = [...educations];\n      newEducations[index][name] = type === 'checkbox' ? checked : value;\n      setEducations(newEducations);\n      if (name === 'school') {\n        setFocusedIndex(index); // Set the index of the current focused input field\n        fetchSchools(value); // Fetch school suggestions when editing school field\n      } else {\n        setSchoolSuggestions([]); // Clear suggestions if not editing school\n      }\n      validateFields(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n    };\n    const addEducationField = () => {\n      if (!validateFields(educations)) {\n        alert('Fill all the information before adding new education.');\n        return;\n      }\n      setEducations([...educations, {\n        school: '',\n        degree: '',\n        specialization: '',\n        startDate: '',\n        endDate: '',\n        marks: '',\n        currentlyPursuing: false\n      }]);\n    };\n    const removeEducationField = index => {\n      const newEducations = educations.filter((_, i) => i !== index);\n      setEducations(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n    };\n    const handleSchoolSelect = (index, school) => {\n      const newEducations = [...educations];\n      newEducations[index].school = school;\n      setEducations(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n      setSchoolSuggestions([]); // Clear suggestions after selection\n      setFocusedIndex(null); // Clear the focused index after selection\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"education-form\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Education\"), educations.map((education, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"education-field\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"remove-education-button\",\n      onClick: () => removeEducationField(index)\n    }, \"-\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row1 education-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"school\",\n      className: \"school\",\n      placeholder: \"School/University\",\n      value: education.school,\n      onChange: event => handleInputChange(index, event),\n      onFocus: () => setFocusedIndex(index)\n    }), schoolSuggestions.length > 0 && focusedIndex === index && /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"autocomplete-list\"\n    }, schoolSuggestions.map((school, i) => /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      onClick: () => handleSchoolSelect(index, school)\n    }, school))), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"degree\",\n      className: \"degree\",\n      placeholder: \"Degree\",\n      value: education.degree,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"specialization\",\n      className: \"specialization\",\n      placeholder: \"Specialization\",\n      value: education.specialization,\n      onChange: event => handleInputChange(index, event)\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row2 education-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      name: \"startdate\",\n      className: \"date-started\",\n      placeholder: \"Date Started\",\n      value: education.startDate,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      name: \"enddate\",\n      className: \"date-ended\",\n      placeholder: \"Date Ended\",\n      value: education.endDate,\n      onChange: event => handleInputChange(index, event),\n      disabled: education.currentlyPursuing\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"marks\",\n      className: \"marks\",\n      placeholder: \"Marks\",\n      value: education.marks,\n      onChange: event => handleInputChange(index, event)\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"currently-pursuing\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"currentlyPursuing\",\n      checked: education.currentlyPursuing,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"label\", null, \"Currently Pursuing\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-education-button\",\n      onClick: addEducationField\n    }, \"Add Another\"));\n  }\n  reactDom.render( /*#__PURE__*/React.createElement(EducationForm, null), document.getElementById('root'));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 61,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".education-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\toverflow : hidden;\n}\n\n.education-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.education-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.school {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.specialization {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.date-started,\n.row2 input.date-ended {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.marks {\n  flex: 0.8;\n  font-size: 12px;\n}\n\n.remove-education-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-133%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-education-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-133%) scale(1.1);\n}\n\n.add-education-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #28a745;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-education-button:hover {\n  background-color: #218838;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n.currently-pursuing {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.currently-pursuing input[type=\"checkbox\"] {\n  margin-right: 5px;\n}\n\n\n\n\n\n\n.autocomplete-list {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 97%;\n  overflow-y: auto;\n  position: absolute;\n  top: 35%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-list li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-list li:hover {\n  background-color: #f0f0f0;\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\n\nappsmith.onReady(function () {\n  function EducationForm() {\n    const [educations, setEducations] = useState([\n      {\n        school: '',\n\t\t\t\tdegree: '',\n        specialization: '',\n        startDate: '',\n        endDate: '',\n        marks: '',\n        currentlyPursuing: false,\n      },\n    ]);\n    const [errors, setErrors] = useState([]);\n    const [schoolSuggestions, setSchoolSuggestions] = useState([]);\n    const [focusedIndex, setFocusedIndex] = useState(null);\n\n    useEffect(() => {\n      const fetchData = () => {\n        const initialEducations = appsmith.model.educations || [];\n        if (initialEducations.length) {\n          const formattedEducations = initialEducations.map((education) => ({\n            school: education.institution_name || '',\n\t\t\t\t\t\tdegree: education.degree || '',\n            specialization: education.specialization || '',\n            startDate: education.start_date || '',\n            endDate: education.end_date || '',\n            marks: education.marks || '',\n            currentlyPursuing: !education.end_date,\n          }));\n          setEducations(formattedEducations);\n        } else {\n          setTimeout(fetchData, 500);\n        }\n      };\n\n      fetchData();\n    }, []);\n\n    // Function to fetch schools based on user input\n    const fetchSchools = async (input) => {\n      const schools = appsmith.model.institutions.map(school => school.name) || [];\n      const filteredSchools = schools.filter((school) =>\n        school.toLowerCase().includes(input.toLowerCase())\n      );\n      setSchoolSuggestions(filteredSchools);\n    };\n\n   \n\t\t\n\t\tconst validateFields = (educations) => {\n\t\tconst newErrors = educations.map(education => {\n\t\t\tlet errors = {};\n\t\t\tif (!education.school) errors.school = 'School cannot be empty';\n\t\t\tif (!education.startDate) errors.startDate = 'Start date cannot be empty';\n\t\t\tif (!education.currentlyPursuing && !education.endDate) errors.endDate = 'End date cannot be empty';\n\t\t\treturn errors;\n\t\t});\n\t\tsetErrors(newErrors);\n\t\treturn !newErrors.some(error => Object.keys(error).length > 0);\n\t};\n\t\t\n\n    const handleInputChange = (index, event) => {\n      const { name, value, type, checked } = event.target;\n      const newEducations = [...educations];\n      newEducations[index][name] = type === 'checkbox' ? checked : value;\n      setEducations(newEducations);\n\n      if (name === 'school') {\n        setFocusedIndex(index); // Set the index of the current focused input field\n        fetchSchools(value); // Fetch school suggestions when editing school field\n      } else {\n        setSchoolSuggestions([]); // Clear suggestions if not editing school\n      }\n\n      validateFields(newEducations);\n      appsmith.updateModel({ educations: newEducations });\n    };\n\n    const addEducationField = () => {\n      if (!validateFields(educations)) {\n        alert('Fill all the information before adding new education.');\n        return;\n      }\n      setEducations([\n        ...educations,\n        {\n          school: '',\n\t\t\t\t\tdegree: '',\n          specialization: '',\n          startDate: '',\n          endDate: '',\n          marks: '',\n          currentlyPursuing: false,\n        },\n      ]);\n    };\n\n    const removeEducationField = (index) => {\n      const newEducations = educations.filter((_, i) => i !== index);\n      setEducations(newEducations);\n      appsmith.updateModel({ educations: newEducations });\n    };\n\n    const handleSchoolSelect = (index, school) => {\n      const newEducations = [...educations];\n      newEducations[index].school = school;\n      setEducations(newEducations);\n      appsmith.updateModel({ educations: newEducations });\n      setSchoolSuggestions([]); // Clear suggestions after selection\n      setFocusedIndex(null); // Clear the focused index after selection\n    };\n\n    return (\n      <div className=\"education-form\">\n        <h3>Education</h3>\n        {educations.map((education, index) => (\n          <div key={index} className=\"education-field\">\n            <div\n              className=\"remove-education-button\"\n              onClick={() => removeEducationField(index)}\n            >\n              -\n            </div>\n            <div className=\"row1 education-row\">\n              <input\n                type=\"text\"\n                name=\"school\"\n                className=\"school\"\n                placeholder=\"School/University\"\n                value={education.school}\n                onChange={(event) => handleInputChange(index, event)}\n                onFocus={() => setFocusedIndex(index)}\n              />\n              {/* School Autocomplete Suggestions for the current focused field */}\n              {schoolSuggestions.length > 0 && focusedIndex === index && (\n                <ul className=\"autocomplete-list\">\n                  {schoolSuggestions.map((school, i) => (\n                    <li key={i} onClick={() => handleSchoolSelect(index, school)}>\n                      {school}\n                    </li>\n                  ))}\n                </ul>\n              )}\n              <input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"degree\"\n\t\t\t\t\t\t\tclassName=\"degree\"\n\t\t\t\t\t\t\tplaceholder=\"Degree\"\n\t\t\t\t\t\t\tvalue={education.degree}\n\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"specialization\"\n\t\t\t\t\t\t\tclassName=\"specialization\"\n\t\t\t\t\t\t\tplaceholder=\"Specialization\"\n\t\t\t\t\t\t\tvalue={education.specialization}\n\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t/>\n            </div>\n            <div className=\"row2 education-row\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"month\"\n\t\t\t\t\t\t\tname=\"startdate\"\n\t\t\t\t\t\t\tclassName=\"date-started\"\n\t\t\t\t\t\t\tplaceholder=\"Date Started\"\n\t\t\t\t\t\t\tvalue={education.startDate}\n\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"month\"\n\t\t\t\t\t\t\tname=\"enddate\"\n\t\t\t\t\t\t\tclassName=\"date-ended\"\n\t\t\t\t\t\t\tplaceholder=\"Date Ended\"\n\t\t\t\t\t\t\tvalue={education.endDate}\n\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t\tdisabled={education.currentlyPursuing}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\tname=\"marks\"\n\t\t\t\t\t\t\tclassName=\"marks\"\n\t\t\t\t\t\t\tplaceholder=\"Marks\"\n\t\t\t\t\t\t\tvalue={education.marks}\n\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n            <div className=\"currently-pursuing\">\n              <input\n                type=\"checkbox\"\n                name=\"currentlyPursuing\"\n                checked={education.currentlyPursuing}\n                onChange={(event) => handleInputChange(index, event)}\n              />\n              <label>Currently Pursuing</label>\n            </div>\n          </div>\n        ))}\n        <div className=\"add-education-button\" onClick={addEducationField}>\n          Add Another\n        </div>\n      </div>\n    );\n  }\n\n  reactDom.render(<EducationForm />, document.getElementById('root'));\n});\n"
  },
  "version": 1,
  "widgetId": "pp9hj7031o",
  "widgetName": "educationWidget"
}