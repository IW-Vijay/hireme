{
  "backgroundColor": "",
  "borderColor": "#fca5a5",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "",
  "bottomRow": 98,
  "boxShadow": "none",
  "defaultModel": "{{getEducationsJSObject.educationData.data}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [
    {
      "key": "backgroundColor"
    }
  ],
  "dynamicTriggerPathList": [],
  "events": [],
  "hideCard": false,
  "iconSVG": "/static/media/icon.9b1065660dedd39cf997e3faa42244bc.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "uhy8eixu17",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 68,
  "mobileLeftColumn": 30,
  "mobileRightColumn": 53,
  "mobileTopRow": 38,
  "needsErrorInfo": false,
  "onCanvasUI": {
    "disableParentSelection": false,
    "focusBGCSSVar": "--on-canvas-ui-widget-focus",
    "focusColorCSSVar": "--on-canvas-ui-widget-selection",
    "selectionBGCSSVar": "--on-canvas-ui-widget-selection",
    "selectionColorCSSVar": "--on-canvas-ui-widget-focus"
  },
  "originalBottomRow": 98,
  "originalTopRow": 78,
  "parentColumnSpace": 18.880859375,
  "parentId": "hnice2rhm7",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ".education-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  overflow: hidden;\n}\n\n.education-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.education-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.school {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.specialization {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.date-started,\n.row2 input.date-ended {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.marks {\n  flex: 0.8;\n  font-size: 12px;\n}\n\n.remove-education-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-133%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-education-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-133%) scale(1.1);\n}\n\n.add-education-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #1E1E1E;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-education-button:hover {\n  background-color: #1E1E1E;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n.currently-pursuing {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.currently-pursuing input[type=checkbox] {\n  margin-right: 5px;\n}\n\n.autocomplete-list {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 97%;\n  overflow-y: auto;\n  position: absolute;\n  top: 75%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-list li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-list li:hover {\n  background-color: #f0f0f0;\n}\n\n.education-tabs {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n\n.tab-button {\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f0f0f0;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.3s ease;\n}\n\n.tab-button.active {\n  background-color: #71717a;\n  color: white;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nappsmith.onReady(function () {\n  function EducationForm() {\n    const [educations, setEducations] = useState([{\n      institution_id: '',\n      institution_name: '',\n      degree: '',\n      specialization: '',\n      start_date: '',\n      end_date: '',\n      marks: '',\n      currently_pursuing: false,\n      isSchool: true // Using boolean for School/University\n    }]);\n    const [errors, setErrors] = useState([]);\n    const [schoolSuggestions, setSchoolSuggestions] = useState([]);\n    //const [uniSuggestions, setUniSuggestions] = useState([]);\n    const [focusedIndex, setFocusedIndex] = useState(null);\n    useEffect(() => {\n      const fetchData = () => {\n        const initialEducations = appsmith.model.educations || [];\n        if (initialEducations.length) {\n          const formattedEducations = initialEducations.map(education => ({\n            institution_id: education.institution_id || '',\n            institution_name: education.institution_name || '',\n            degree: education.degree || '',\n            specialization: education.specialization || '',\n            start_date: education.start_date || '',\n            end_date: education.end_date || '',\n            marks: education.marks || '',\n            currently_pursuing: education.currently_pursuing,\n            isSchool: education.isschool // Default to \"School\"\n          }));\n          setEducations(formattedEducations);\n        } else {\n          setTimeout(fetchData, 500);\n        }\n      };\n      fetchData();\n    }, []);\n\n    // Function to fetch schools based on user input\n    const fetchSchools = async input => {\n      const schools = appsmith.model.institutions.filter(institution => institution.isschool).map(institution => ({\n        institution_id: institution.institution_id,\n        name: institution.name\n      })) || [];\n      const filteredSchools = schools.filter(school => school.name.toLowerCase().includes(input.toLowerCase()));\n      setSchoolSuggestions(filteredSchools);\n    };\n    const fetchUnis = async input => {\n      const schools = appsmith.model.institutions.filter(institution => !institution.isschool).map(institution => ({\n        institution_id: institution.institution_id,\n        name: institution.name\n      })) || []; // Include ID\n      const filteredSchools = schools.filter(school => school.name.toLowerCase().includes(input.toLowerCase()));\n      setSchoolSuggestions(filteredSchools);\n    };\n    const validateFields = educations => {\n      const newErrors = educations.map(education => {\n        let errors = {};\n        if (!education.institution_name) errors.institution_name = 'Institution name cannot be empty';\n        return errors;\n      });\n      setErrors(newErrors);\n      return !newErrors.some(error => Object.keys(error).length > 0);\n    };\n    const handleInputChange = (index, event) => {\n      const {\n        name,\n        value,\n        type,\n        checked\n      } = event.target;\n      const newEducations = [...educations];\n      newEducations[index][name] = type === 'checkbox' ? checked : value;\n      setEducations(newEducations);\n\n      // Call appropriate fetch function based on the isSchool property\n      if (name === 'institution_name') {\n        newEducations[index].institution_id = '';\n        setFocusedIndex(index); // Set the index of the current focused input field\n        if (newEducations[index].isSchool) {\n          fetchSchools(value); // Fetch schools when isSchool is true\n        } else {\n          fetchUnis(value); // Fetch universities when isSchool is false\n        }\n      } else {\n        setSchoolSuggestions([]); // Clear suggestions if not editing institution name\n      }\n      validateFields(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n    };\n    const handleTabChange = (index, isSchool) => {\n      const newEducations = [...educations];\n      newEducations[index].institution_id = '';\n      newEducations[index].institution_name = '';\n      newEducations[index].isSchool = isSchool; // Update isSchool based on tab click\n      setEducations(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      }); // Update model when tab is changed\n    };\n    const addEducationField = () => {\n      if (!validateFields(educations)) {\n        alert('Fill all the information before adding new education.');\n        return;\n      }\n      setEducations([...educations, {\n        institution_id: '',\n        institution_name: '',\n        degree: '',\n        specialization: '',\n        start_date: '',\n        end_date: '',\n        marks: '',\n        currently_pursuing: false,\n        isSchool: true // Default to \"School\"\n      }]);\n    };\n    const removeEducationField = index => {\n      const newEducations = educations.filter((_, i) => i !== index);\n      setEducations(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n    };\n    const handleSchoolSelect = (index, schoolName, institutionId) => {\n      const newEducations = [...educations];\n      newEducations[index].institution_name = schoolName;\n      newEducations[index].institution_id = institutionId; // Set the institution_id directly\n      setEducations(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n      setSchoolSuggestions([]); // Clear suggestions after selection\n      setFocusedIndex(null); // Clear the focused index after selection\n    };\n    const handleBlur = (index, event) => {\n      setTimeout(() => {\n        if (focusedIndex === index) {\n          setSchoolSuggestions([]); // Clear suggestions when focus is lost\n        }\n      }, 100); // Delay for allowing selection before blur happens\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"education-form\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Education\"), educations.map((education, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"education-field\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"remove-education-button\",\n      onClick: () => removeEducationField(index)\n    }, \"-\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"education-tabs\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: `tab-button ${education.isSchool ? 'active' : ''}`,\n      onClick: () => {\n        handleTabChange(index, true), handleInputChange(index, event);\n      }\n    }, \"School\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: `tab-button ${!education.isSchool ? 'active' : ''}`,\n      onClick: () => {\n        handleTabChange(index, false), handleInputChange(index, event);\n      }\n    }, \"University\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row1 education-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"institution_name\",\n      className: \"school\",\n      placeholder: education.isSchool ? \"School\" : \"University\",\n      value: education.institution_name,\n      onChange: event => handleInputChange(index, event),\n      onFocus: () => setFocusedIndex(index),\n      onBlur: event => handleBlur(index, event)\n    }), schoolSuggestions.length > 0 && focusedIndex === index && /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"autocomplete-list\"\n    }, schoolSuggestions.map(school => /*#__PURE__*/React.createElement(\"li\", {\n      key: school.institution_id,\n      onClick: () => handleSchoolSelect(index, school.name, school.institution_id)\n    }, school.name))), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"degree\",\n      className: \"degree\",\n      placeholder: education.isSchool ? \"Grade\" : \"Degree\",\n      value: education.degree,\n      onChange: event => handleInputChange(index, event)\n    }), !education.isSchool && /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"specialization\",\n      className: \"specialization\",\n      placeholder: \"Major\",\n      value: education.specialization,\n      onChange: event => handleInputChange(index, event)\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"currently-pursuing\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"currently_pursuing\",\n      checked: education.currently_pursuing,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"label\", null, \"Currently Pursuing\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-education-button\",\n      onClick: addEducationField\n    }, \"Add Another\"));\n  }\n  reactDom.render( /*#__PURE__*/React.createElement(EducationForm, null), document.getElementById('root'));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 78,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".education-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\toverflow : hidden;\n}\n\n.education-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.education-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.school {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.specialization {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.date-started,\n.row2 input.date-ended {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.marks {\n  flex: 0.8;\n  font-size: 12px;\n}\n\n.remove-education-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-133%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-education-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-133%) scale(1.1);\n}\n\n.add-education-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #1E1E1E;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-education-button:hover {\n  background-color: #1E1E1E;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n.currently-pursuing {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.currently-pursuing input[type=\"checkbox\"] {\n  margin-right: 5px;\n}\n\n\n\n\n\n\n.autocomplete-list {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 97%;\n  overflow-y: auto;\n  position: absolute;\n  top: 75%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-list li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-list li:hover {\n  background-color: #f0f0f0;\n}\n\n\n\n\n\n.education-tabs {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n\n.tab-button {\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f0f0f0;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.3s ease;\n}\n\n.tab-button.active {\n  background-color: #71717a;\n  color: white;\n}\n\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\n\nappsmith.onReady(function () {\n\tfunction EducationForm() {\n\t\tconst [educations, setEducations] = useState([\n\t\t\t{\n\t\t\t\tinstitution_id: '',\n\t\t\t\tinstitution_name: '',\n\t\t\t\tdegree: '',\n\t\t\t\tspecialization: '',\n\t\t\t\tstart_date: '',\n\t\t\t\tend_date: '',\n\t\t\t\tmarks: '',\n\t\t\t\tcurrently_pursuing: false,\n\t\t\t\tisSchool: true // Using boolean for School/University\n\t\t\t},\n\t\t]);\n\t\tconst [errors, setErrors] = useState([]);\n\t\tconst [schoolSuggestions, setSchoolSuggestions] = useState([]);\n\t\t//const [uniSuggestions, setUniSuggestions] = useState([]);\n\t\tconst [focusedIndex, setFocusedIndex] = useState(null);\n\n\t\tuseEffect(() => {\n\t\t\tconst fetchData = () => {\n\t\t\t\tconst initialEducations = appsmith.model.educations || [];\n\t\t\t\tif (initialEducations.length) {\n\t\t\t\t\tconst formattedEducations = initialEducations.map((education) => ({\n\t\t\t\t\t\tinstitution_id: education.institution_id || '',\n\t\t\t\t\t\tinstitution_name: education.institution_name || '',\n\t\t\t\t\t\tdegree: education.degree || '',\n\t\t\t\t\t\tspecialization: education.specialization || '',\n\t\t\t\t\t\tstart_date: education.start_date || '',\n\t\t\t\t\t\tend_date: education.end_date || '',\n\t\t\t\t\t\tmarks: education.marks || '',\n\t\t\t\t\t\tcurrently_pursuing: education.currently_pursuing,\n\t\t\t\t\t\tisSchool: education.isschool // Default to \"School\"\n\t\t\t\t\t}));\n\t\t\t\t\tsetEducations(formattedEducations);\n\t\t\t\t} else {\n\t\t\t\t\tsetTimeout(fetchData, 500);\n\t\t\t\t}\n\t\t\t};\n\t\t\tfetchData();\n\t\t}, []);\n\n\t\t// Function to fetch schools based on user input\n\t\tconst fetchSchools = async (input) => {\n\t\t\tconst schools = appsmith.model.institutions\n\t\t\t.filter((institution) => institution.isschool)\n\t\t\t.map(institution => ({ institution_id: institution.institution_id, name: institution.name })) || []; \n\t\t\tconst filteredSchools = schools.filter((school) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t school.name.toLowerCase().includes(input.toLowerCase())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\tsetSchoolSuggestions(filteredSchools);\n\t\t};\n\n\n\t\tconst fetchUnis = async (input) => {\n\t\t\tconst schools = appsmith.model.institutions\n\t\t\t.filter((institution) => !institution.isschool)\n\t\t\t.map(institution => ({ institution_id: institution.institution_id, name: institution.name })) || []; // Include ID\n\t\t\tconst filteredSchools = schools.filter((school) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t school.name.toLowerCase().includes(input.toLowerCase())\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\tsetSchoolSuggestions(filteredSchools);\n\t\t};\n\n\t\tconst validateFields = (educations) => {\n\t\t\tconst newErrors = educations.map(education => {\n\t\t\t\tlet errors = {};\n\t\t\t\tif (!education.institution_name) errors.institution_name = 'Institution name cannot be empty';\n\t\t\t\treturn errors;\n\t\t\t});\n\t\t\tsetErrors(newErrors);\n\t\t\treturn !newErrors.some(error => Object.keys(error).length > 0);\n\t\t};\n\n\t\tconst handleInputChange = (index, event) => {\n\t\t\tconst { name, value, type, checked } = event.target;\n\n\t\t\tconst newEducations = [...educations];\n\t\t\tnewEducations[index][name] = type === 'checkbox' ? checked : value;\n\t\t\tsetEducations(newEducations);\n\t\t\t\n\n\t\t\t// Call appropriate fetch function based on the isSchool property\n\t\t\tif (name === 'institution_name') {\n\t\t\t\tnewEducations[index].institution_id = '';\n\t\t\t\tsetFocusedIndex(index); // Set the index of the current focused input field\n\t\t\t\tif (newEducations[index].isSchool) {\n\t\t\t\t\tfetchSchools(value); // Fetch schools when isSchool is true\n\t\t\t\t} else {\n\t\t\t\t\tfetchUnis(value); // Fetch universities when isSchool is false\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetSchoolSuggestions([]); // Clear suggestions if not editing institution name\n\t\t\t}\n\n\t\t\tvalidateFields(newEducations);\n\t\t\tappsmith.updateModel({ educations: newEducations });\n\t\t};\n\n\t\tconst handleTabChange = (index, isSchool) => {\n\t\t\tconst newEducations = [...educations];\n\t\t\tnewEducations[index].institution_id = '';\n\t\t\tnewEducations[index].institution_name = '';\n\t\t\tnewEducations[index].isSchool = isSchool; // Update isSchool based on tab click\n\t\t\tsetEducations(newEducations);\n\t\t\tappsmith.updateModel({ educations: newEducations }); // Update model when tab is changed\n\t\t};\n\n\t\tconst addEducationField = () => {\n\t\t\tif (!validateFields(educations)) {\n\t\t\t\talert('Fill all the information before adding new education.');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsetEducations([\n\t\t\t\t...educations,\n\t\t\t\t{\n\t\t\t\t\tinstitution_id: '',\n\t\t\t\t\tinstitution_name: '',\n\t\t\t\t\tdegree: '',\n\t\t\t\t\tspecialization: '',\n\t\t\t\t\tstart_date: '',\n\t\t\t\t\tend_date: '',\n\t\t\t\t\tmarks: '',\n\t\t\t\t\tcurrently_pursuing: false,\n\t\t\t\t\tisSchool: true // Default to \"School\"\n\t\t\t\t},\n\t\t\t]);\n\t\t};\n\n\t\tconst removeEducationField = (index) => {\n\t\t\tconst newEducations = educations.filter((_, i) => i !== index);\n\t\t\tsetEducations(newEducations);\n\t\t\tappsmith.updateModel({ educations: newEducations });\n\t\t};\n\n\t\tconst handleSchoolSelect = (index, schoolName, institutionId) => {\n\t\t\tconst newEducations = [...educations];\n\t\t\tnewEducations[index].institution_name = schoolName;\n\t\t\tnewEducations[index].institution_id = institutionId; // Set the institution_id directly\n\t\t\tsetEducations(newEducations);\n\t\t\tappsmith.updateModel({ educations: newEducations });\n\t\t\tsetSchoolSuggestions([]); // Clear suggestions after selection\n\t\t\tsetFocusedIndex(null); // Clear the focused index after selection\n\t\t};\n\t\t\n\t\tconst handleBlur = (index, event) => {\n      setTimeout(() => {\n        if (focusedIndex === index) {\n          setSchoolSuggestions([]); // Clear suggestions when focus is lost\n        }\n      }, 100); // Delay for allowing selection before blur happens\n    };\n\n\t\treturn (\n\t\t\t<div className=\"education-form\">\n\t\t\t<h3>Education</h3>\n\n\t\t\t{/* Education fields */}\n\t{educations.map((education, index) => (\n\t\t<div key={index} className=\"education-field\">\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tclassName=\"remove-education-button\"\n\t\t\t\t\t\t\t\t\tonClick={() => removeEducationField(index)}\n\t>\n\t\t-\n\t\t</div>\n\n\t{/* Tab navigation for each education */}\n\t<div className=\"education-tabs\">\n\t\t<button\n\tclassName={`tab-button ${education.isSchool ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={() => {handleTabChange(index, true), handleInputChange(index, event)}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tSchool\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`tab-button ${!education.isSchool ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={() => {handleTabChange(index, false), handleInputChange(index, event)}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tUniversity\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div className=\"row1 education-row\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"institution_name\"\n\t\t\t\t\t\t\t\tclassName=\"school\"\n\t\t\t\t\t\t\t\tplaceholder={education.isSchool ? \"School\" : \"University\"}\n\t\t\t\t\t\t\t\tvalue={education.institution_name}\n\t\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t\t\tonFocus={() => setFocusedIndex(index)}\n\t\t\t\t\t\t\t\tonBlur={(event) => handleBlur(index, event)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{/* School Autocomplete Suggestions for the current focused field */}\n\t\t\t\t\t\t\t{schoolSuggestions.length > 0 && focusedIndex === index && (\n\t\t\t\t\t\t\t\t\t<ul className=\"autocomplete-list\">\n\t\t\t\t\t\t\t\t\t\t\t{schoolSuggestions.map((school) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<li key={school.institution_id} onClick={() => handleSchoolSelect(index, school.name, school.institution_id)}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{school.name}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\tname=\"degree\"\n\t\t\t\t\t\t\t\tclassName=\"degree\"\n\t\t\t\t\t\t\t\tplaceholder={education.isSchool ? \"Grade\" : \"Degree\"}\n\t\t\t\t\t\t\t\tvalue={education.degree}\n\t\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{!education.isSchool && (\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tname=\"specialization\"\n\t\t\t\t\t\t\t\t\tclassName=\"specialization\"\n\t\t\t\t\t\t\t\t\tplaceholder=\"Major\"\n\t\t\t\t\t\t\t\t\tvalue={education.specialization}\n\t\t\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div className=\"currently-pursuing\">\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\t\t\t\tname=\"currently_pursuing\"\n\t\t\t\t\t\t\t\tchecked={education.currently_pursuing}\n\t\t\t\t\t\t\t\tonChange={(event) => handleInputChange(index, event)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<label>Currently Pursuing</label>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t\t<div className=\"add-education-button\" onClick={addEducationField}>\n\t\t\t\t\tAdd Another\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treactDom.render(<EducationForm />, document.getElementById('root'));\n});\n"
  },
  "version": 1,
  "widgetId": "pp9hj7031o",
  "widgetName": "educationWidget"
}