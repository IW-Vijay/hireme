{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#b91c1c",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "0",
  "bottomRow": 112,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{getWorkexsJSObject.workexData.data}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [],
  "events": [],
  "hideCard": false,
  "iconSVG": "/static/media/icon.9b1065660dedd39cf997e3faa42244bc.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "uhy8eixu17",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 68,
  "mobileLeftColumn": 30,
  "mobileRightColumn": 53,
  "mobileTopRow": 38,
  "needsErrorInfo": false,
  "onCanvasUI": {
    "disableParentSelection": false,
    "focusBGCSSVar": "--on-canvas-ui-widget-focus",
    "focusColorCSSVar": "--on-canvas-ui-widget-selection",
    "selectionBGCSSVar": "--on-canvas-ui-widget-selection",
    "selectionColorCSSVar": "--on-canvas-ui-widget-focus"
  },
  "originalBottomRow": 110,
  "originalTopRow": 103,
  "parentColumnSpace": 18.880859375,
  "parentId": "hnice2rhm7",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ".work-experience-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.work-experience-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.work-experience-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input,\n.row1 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.organisation {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.role {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input,\n.row2 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.start-date,\n.row2 input.end-date {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.skills {\n  flex: 2;\n  font-size: 14px;\n}\n\n.remove-work-experience-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-125%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-work-experience-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-125%) scale(1.1);\n}\n\n.add-work-experience-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #28a745;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-work-experience-button:hover {\n  background-color: #218838;\n  transform: scale(1.05); /* Slightly increase the size on hover */\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nappsmith.onReady(function () {\n  function WorkExperienceForm() {\n    const [workExperiences, setWorkExperiences] = useState([{\n      organisation: '',\n      role: '',\n      type: 'full-time',\n      startDate: '',\n      endDate: '',\n      skills: '',\n      currentlyWorking: false\n    }]);\n    const [errors, setErrors] = useState([]);\n    useEffect(() => {\n      // Fetch initial data from Appsmith model\n      const initialWorkexs = appsmith.model.workexs || [];\n      const formattedWorkexs = initialWorkexs.map(Workex => ({\n        organisation: Workex.organization || '',\n        role: Workex.role || '',\n        type: Workex.type || 'full-time',\n        startDate: Workex.startdate || '',\n        endDate: Workex.enddate || '',\n        skills: Workex.skills || '',\n        currentlyWorking: !Workex.enddate // Set to true if enddate is empty\n      }));\n      setWorkExperiences(formattedWorkexs);\n    }, []);\n    const validateFields = workExperiences => {\n      const newErrors = workExperiences.map(workExperience => {\n        let errors = {};\n        if (!workExperience.organisation) errors.organisation = 'Organisation cannot be empty';\n        if (!workExperience.role) errors.role = 'Role cannot be empty';\n        if (!workExperience.startDate) errors.startDate = 'Start date cannot be empty';\n        if (!workExperience.currentlyWorking && !workExperience.endDate) errors.endDate = 'End date cannot be empty';\n        return errors;\n      });\n      setErrors(newErrors);\n      return !newErrors.some(error => Object.keys(error).length > 0);\n    };\n    const handleInputChange = (index, event) => {\n      const {\n        name,\n        value,\n        type,\n        checked\n      } = event.target;\n      const newWorkExperiences = [...workExperiences];\n      newWorkExperiences[index][name] = type === 'checkbox' ? checked : value;\n      setWorkExperiences(newWorkExperiences);\n      validateFields(newWorkExperiences);\n      appsmith.updateModel({\n        experiences: newWorkExperiences\n      });\n    };\n    const addWorkExperienceField = () => {\n      if (!validateFields(workExperiences)) {\n        alert(\"Fill all the information before adding new experience.\");\n        return;\n      }\n      setWorkExperiences([...workExperiences, {\n        organisation: '',\n        role: '',\n        type: 'full-time',\n        startDate: '',\n        endDate: '',\n        skills: '',\n        currentlyWorking: false\n      }]);\n    };\n    const removeWorkExperienceField = index => {\n      const newWorkExperiences = workExperiences.filter((_, i) => i !== index);\n      setWorkExperiences(newWorkExperiences);\n      appsmith.updateModel({\n        experiences: newWorkExperiences\n      });\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"work-experience-form\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Work Experience\"), workExperiences.map((experience, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"work-experience-field\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"remove-work-experience-button\",\n      onClick: () => removeWorkExperienceField(index)\n    }, \"-\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row1 work-experience-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"organisation\",\n      className: \"organisation\",\n      placeholder: \"Organisation\",\n      value: experience.organisation,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"role\",\n      className: \"role\",\n      placeholder: \"Role\",\n      value: experience.role,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"select\", {\n      name: \"type\",\n      className: \"type\",\n      value: experience.type,\n      onChange: event => handleInputChange(index, event)\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      value: \"full-time\"\n    }, \"Full Time\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"intern\"\n    }, \"Intern\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"part-time\"\n    }, \"Part Time\"), /*#__PURE__*/React.createElement(\"option\", {\n      value: \"contract\"\n    }, \"Contract\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row2 work-experience-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      name: \"startDate\",\n      className: \"start-date\",\n      placeholder: \"Start Date\",\n      value: experience.startDate,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      name: \"endDate\",\n      className: \"end-date\",\n      placeholder: \"End Date\",\n      value: experience.endDate,\n      onChange: event => handleInputChange(index, event),\n      disabled: experience.currentlyWorking\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"skills\",\n      className: \"skills\",\n      placeholder: \"Skills\",\n      value: experience.skills,\n      onChange: event => handleInputChange(index, event)\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"currently-working\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"currentlyWorking\",\n      checked: experience.currentlyWorking,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"label\", null, \"Currently Working Here\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-work-experience-button\",\n      onClick: addWorkExperienceField\n    }, \"Add Another\"));\n  }\n  reactDom.render( /*#__PURE__*/React.createElement(WorkExperienceForm, null), document.getElementById(\"root\"));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 105,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".work-experience-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.work-experience-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.work-experience-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input,\n.row1 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.organisation {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.role {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input,\n.row2 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.start-date,\n.row2 input.end-date {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.skills {\n  flex: 2;\n  font-size: 14px;\n}\n\n.remove-work-experience-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-125%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-work-experience-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-125%) scale(1.1);\n}\n\n\n.add-work-experience-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #28a745;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-work-experience-button:hover {\n  background-color: #218838;\n  transform: scale(1.05); /* Slightly increase the size on hover */\n}\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\n\nappsmith.onReady(function() {\n\nfunction WorkExperienceForm() {\n  const [workExperiences, setWorkExperiences] = useState([{\n    organisation: '',\n    role: '',\n    type: 'full-time',\n    startDate: '',\n    endDate: '',\n    skills: '',\n    currentlyWorking: false\n  }]);\n\tconst [errors, setErrors] = useState([]);\n\tuseEffect(() => {\n        // Fetch initial data from Appsmith model\n        const initialWorkexs = appsmith.model.workexs || [];\n        const formattedWorkexs = initialWorkexs.map(Workex => ({\n            organisation: Workex.organization || '',\n            role: Workex.role || '',\n\t\t\t\t\t\ttype: Workex.type || 'full-time',\n            startDate: Workex.startdate || '',\n            endDate: Workex.enddate || '',\n            skills: Workex.skills || '',\n            currentlyWorking: !Workex.enddate // Set to true if enddate is empty\n        }));\n        setWorkExperiences(formattedWorkexs);\n    }, []);\n\n\t\t\n const validateFields = (workExperiences) => {\n    const newErrors = workExperiences.map(workExperience => {\n      let errors = {};\n      if (!workExperience.organisation) errors.organisation = 'Organisation cannot be empty';\n\t\t\tif (!workExperience.role) errors.role = 'Role cannot be empty';\n      if (!workExperience.startDate) errors.startDate = 'Start date cannot be empty';\n      if (!workExperience.currentlyWorking && !workExperience.endDate) errors.endDate = 'End date cannot be empty';\n      return errors;\n    });\n    setErrors(newErrors);\n    return !newErrors.some(error => Object.keys(error).length > 0);\n  };\n\n  const handleInputChange = (index, event) => {\n    const { name, value, type, checked } = event.target;\n    const newWorkExperiences = [...workExperiences];\n    newWorkExperiences[index][name] = type === 'checkbox' ? checked : value;\n    setWorkExperiences(newWorkExperiences);\n    validateFields(newWorkExperiences);\n\t\tappsmith.updateModel({experiences : newWorkExperiences});\n  };\n\n  const addWorkExperienceField = () => {\n    if (!validateFields(workExperiences)) {\n      alert(\"Fill all the information before adding new experience.\");\n      return;\n    }\n    setWorkExperiences([...workExperiences, {\n      organisation: '',\n      role: '',\n      type: 'full-time',\n      startDate: '',\n      endDate: '',\n      skills: '',\n      currentlyWorking: false\n    }]);\n  };\n\n  const removeWorkExperienceField = (index) => {\n    const newWorkExperiences = workExperiences.filter((_, i) => i !== index);\n    setWorkExperiences(newWorkExperiences);\n\t\tappsmith.updateModel({experiences : newWorkExperiences});\n  };\n\n  return (\n    <div className=\"work-experience-form\">\n\t\t<h3>Work Experience</h3>\n      {workExperiences.map((experience, index) => (\n        <div key={index} className=\"work-experience-field\">\n          <div className=\"remove-work-experience-button\" onClick={() => removeWorkExperienceField(index)}>-</div>\n          <div className=\"row1 work-experience-row\">\n            <input\n              type=\"text\"\n              name=\"organisation\"\n              className=\"organisation\"\n              placeholder=\"Organisation\"\n              value={experience.organisation}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n            <input\n              type=\"text\"\n              name=\"role\"\n              className=\"role\"\n              placeholder=\"Role\"\n              value={experience.role}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n            <select\n              name=\"type\"\n              className=\"type\"\n              value={experience.type}\n              onChange={(event) => handleInputChange(index, event)}\n            >\n              <option value=\"full-time\">Full Time</option>\n              <option value=\"intern\">Intern</option>\n              <option value=\"part-time\">Part Time</option>\n              <option value=\"contract\">Contract</option>\n            </select>\n          </div>\n          <div className=\"row2 work-experience-row\">\n            <input\n              type=\"month\"\n              name=\"startDate\"\n              className=\"start-date\"\n              placeholder=\"Start Date\"\n              value={experience.startDate}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n            <input\n              type=\"month\"\n              name=\"endDate\"\n              className=\"end-date\"\n              placeholder=\"End Date\"\n              value={experience.endDate}\n              onChange={(event) => handleInputChange(index, event)}\n              disabled={experience.currentlyWorking}\n            />\n            <input\n              type=\"text\"\n              name=\"skills\"\n              className=\"skills\"\n              placeholder=\"Skills\"\n              value={experience.skills}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n          </div>\n          <div className=\"currently-working\">\n            <input\n              type=\"checkbox\"\n              name=\"currentlyWorking\"\n              checked={experience.currentlyWorking}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n            <label>Currently Working Here</label>\n          </div>\n        </div>\n      ))}\n      <div className=\"add-work-experience-button\" onClick={addWorkExperienceField}>Add Another</div>\n    </div>\n  );\n}\n\nreactDom.render(<WorkExperienceForm />, document.getElementById(\"root\"));\n})\n"
  },
  "version": 1,
  "widgetId": "h12kkst2u9",
  "widgetName": "experienceWidget"
}