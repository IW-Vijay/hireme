{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#b91c1c",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "0",
  "bottomRow": 92,
  "boxShadow": "{{appsmith.theme.boxShadow.appBoxShadow}}",
  "defaultModel": "{{\tgetInstisAndOrgsJSObject.instiAndOrgData.data[0]\n}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "boxShadow"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [],
  "events": [],
  "hideCard": false,
  "iconSVG": "/static/media/icon.9b1065660dedd39cf997e3faa42244bc.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "uhy8eixu17",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 68,
  "mobileLeftColumn": 30,
  "mobileRightColumn": 53,
  "mobileTopRow": 38,
  "needsErrorInfo": false,
  "onCanvasUI": {
    "disableParentSelection": false,
    "focusBGCSSVar": "--on-canvas-ui-widget-focus",
    "focusColorCSSVar": "--on-canvas-ui-widget-selection",
    "selectionBGCSSVar": "--on-canvas-ui-widget-selection",
    "selectionColorCSSVar": "--on-canvas-ui-widget-focus"
  },
  "originalBottomRow": 91,
  "originalTopRow": 71,
  "parentColumnSpace": 18.880859375,
  "parentId": "hnice2rhm7",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ".education-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  max-height: none;\n  overflow: visible;\n}\n\n.education-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.education-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.school {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.specialization {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.date-started,\n.row2 input.date-ended {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.marks {\n  flex: 0.8;\n  font-size: 12px;\n}\n\n.remove-education-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-133%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-education-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-133%) scale(1.1);\n}\n\n.add-education-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #28a745;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-education-button:hover {\n  background-color: #218838;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n.currently-pursuing {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.currently-pursuing input[type=checkbox] {\n  margin-right: 5px;\n}\n\n.autocomplete-suggestions {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 150px;\n  overflow-y: auto;\n  position: absolute;\n  top: 35%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-suggestions li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-suggestions li:hover {\n  background-color: #f0f0f0;\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nappsmith.onReady(function () {\n  function EducationForm() {\n    let [educations, setEducations] = useState([{\n      school: '',\n      degree: '',\n      specialization: '',\n      startdate: '',\n      enddate: '',\n      marks: '',\n      currentlyPursuing: false\n    }]);\n    const [errors, setErrors] = useState([]);\n    const [institutionList, setInstitutionList] = useState([]);\n    const [filteredInstitutions, setFilteredInstitutions] = useState([]);\n    useEffect(() => {\n      // Load institution list from the appsmith model asynchronously\n      const fetchInstitutionList = () => {\n        const institutions = appsmith.model.institutions.map(inst => inst.name) || [];\n        if (institutions.length > 0) {\n          setInstitutionList(institutions);\n        } else {\n          // Retry loading institutions after some time if not available yet\n          setTimeout(fetchInstitutionList, 500);\n        }\n      };\n      fetchInstitutionList();\n    }, []);\n    const validateFields = educations => {\n      const newErrors = educations.map(education => {\n        let errors = {};\n        if (!education.school) errors.school = 'School cannot be empty';\n        if (!education.startdate) errors.startdate = 'Start date cannot be empty';\n        if (!education.currentlyPursuing && !education.enddate) errors.enddate = 'End date cannot be empty';\n        return errors;\n      });\n      setErrors(newErrors);\n      return !newErrors.some(error => Object.keys(error).length > 0);\n    };\n    const handleInputChange = (index, event) => {\n      const {\n        name,\n        value,\n        type,\n        checked\n      } = event.target;\n      const newEducations = [...educations];\n      newEducations[index][name] = type === 'checkbox' ? checked : value;\n      setEducations(newEducations);\n      validateFields(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n    };\n    const handleInstitutionInput = (index, event) => {\n      const value = event.target.value;\n      const newEducations = [...educations];\n      newEducations[index].school = value;\n      setEducations(newEducations);\n\n      // Filter the institution list based on user input\n      if (institutionList.length > 0) {\n        setFilteredInstitutions(institutionList.filter(inst => inst.toLowerCase().includes(value.toLowerCase())));\n      }\n    };\n    const selectInstitution = (index, institution) => {\n      const newEducations = [...educations];\n      newEducations[index].school = institution;\n      setEducations(newEducations);\n      setFilteredInstitutions([]);\n    };\n    const addEducationField = () => {\n      if (!validateFields(educations)) {\n        alert(\"Fill all the information before adding new education.\");\n        return;\n      }\n      setEducations([...educations, {\n        school: '',\n        degree: '',\n        specialization: '',\n        startdate: '',\n        enddate: '',\n        marks: '',\n        currentlyPursuing: false\n      }]);\n    };\n    const removeEducationField = index => {\n      const newEducations = educations.filter((_, i) => i !== index);\n      setEducations(newEducations);\n      validateFields(newEducations);\n      appsmith.updateModel({\n        educations: newEducations\n      });\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"education-form\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Education\"), educations.map((education, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"education-field\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"remove-education-button\",\n      onClick: () => removeEducationField(index)\n    }, \"-\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row1 education-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"school\",\n      className: \"school\",\n      placeholder: \"School/University\",\n      value: education.school,\n      onChange: event => handleInstitutionInput(index, event)\n    }), filteredInstitutions.length > 0 && /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"autocomplete-suggestions\"\n    }, filteredInstitutions.map((inst, i) => /*#__PURE__*/React.createElement(\"li\", {\n      key: i,\n      onClick: () => selectInstitution(index, inst)\n    }, inst))), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"degree\",\n      className: \"degree\",\n      placeholder: \"Degree\",\n      value: education.degree,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"specialization\",\n      className: \"specialization\",\n      placeholder: \"Specialization\",\n      value: education.specialization,\n      onChange: event => handleInputChange(index, event)\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row2 education-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      name: \"startdate\",\n      className: \"date-started\",\n      placeholder: \"Date Started\",\n      value: education.startdate,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"month\",\n      name: \"enddate\",\n      className: \"date-ended\",\n      placeholder: \"Date Ended\",\n      value: education.enddate,\n      onChange: event => handleInputChange(index, event),\n      disabled: education.currentlyPursuing\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"marks\",\n      className: \"marks\",\n      placeholder: \"Marks\",\n      value: education.marks,\n      onChange: event => handleInputChange(index, event)\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"currently-pursuing\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"currentlyPursuing\",\n      checked: education.currentlyPursuing,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"label\", null, \"Currently Pursuing\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-education-button ${!validateFields(educations) ? 'disabled' : ''}\",\n      onClick: addEducationField\n    }, \"Add Another\"));\n  }\n  reactDom.render( /*#__PURE__*/React.createElement(EducationForm, null), document.getElementById(\"root\"));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 72,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".education-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\tmax-height: none;\n  overflow: visible; \n}\n\n.education-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.education-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.school {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.specialization {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.date-started,\n.row2 input.date-ended {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.marks {\n  flex: 0.8;\n  font-size: 12px;\n}\n\n.remove-education-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-133%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-education-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-133%) scale(1.1);\n}\n\n.add-education-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #28a745;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-education-button:hover {\n  background-color: #218838;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n.currently-pursuing {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.currently-pursuing input[type=\"checkbox\"] {\n  margin-right: 5px;\n}\n\n\n\n\n\n.autocomplete-suggestions {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 150px;\n  overflow-y: auto;\n  position: absolute;\n  top: 35%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-suggestions li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-suggestions li:hover {\n  background-color: #f0f0f0;\n}\n\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\n\nappsmith.onReady(function() {\n\nfunction EducationForm() {\n  let [educations, setEducations] = useState([{ school: '', degree: '', specialization: '', startdate: '', enddate: '', marks: '', currentlyPursuing: false }]);\n  const [errors, setErrors] = useState([]);\n  const [institutionList, setInstitutionList] = useState([]);\n  const [filteredInstitutions, setFilteredInstitutions] = useState([]);\n\n  useEffect(() => {\n    // Load institution list from the appsmith model asynchronously\n    const fetchInstitutionList = () => {\n      const institutions = appsmith.model.institutions.map(inst => inst.name) || [];\n      if (institutions.length > 0) {\n        setInstitutionList(institutions);\n      } else {\n        // Retry loading institutions after some time if not available yet\n        setTimeout(fetchInstitutionList, 500);\n      }\n    };\n\n    fetchInstitutionList();\n  }, []);\n\n  const validateFields = (educations) => {\n    const newErrors = educations.map(education => {\n      let errors = {};\n      if (!education.school) errors.school = 'School cannot be empty';\n      if (!education.startdate) errors.startdate = 'Start date cannot be empty';\n      if (!education.currentlyPursuing && !education.enddate) errors.enddate = 'End date cannot be empty';\n      return errors;\n    });\n    setErrors(newErrors);\n    return !newErrors.some(error => Object.keys(error).length > 0);\n  };\n\n  const handleInputChange = (index, event) => {\n    const { name, value, type, checked } = event.target;\n    const newEducations = [...educations];\n    newEducations[index][name] = type === 'checkbox' ? checked : value;\n    setEducations(newEducations);\n    validateFields(newEducations);\n    appsmith.updateModel({ educations: newEducations });\n  };\n\n  const handleInstitutionInput = (index, event) => {\n    const value = event.target.value;\n    const newEducations = [...educations];\n    newEducations[index].school = value;\n    setEducations(newEducations);\n\n    // Filter the institution list based on user input\n    if (institutionList.length > 0) {\n      setFilteredInstitutions(\n        institutionList.filter(inst => inst.toLowerCase().includes(value.toLowerCase()))\n      );\n    }\n  };\n\n  const selectInstitution = (index, institution) => {\n    const newEducations = [...educations];\n    newEducations[index].school = institution;\n    setEducations(newEducations);\n    setFilteredInstitutions([]);\n  };\n\n  const addEducationField = () => {\n    if (!validateFields(educations)) {\n      alert(\"Fill all the information before adding new education.\");\n      return;\n    }\n    setEducations([...educations, { school: '', degree: '', specialization: '', startdate: '', enddate: '', marks: '', currentlyPursuing: false }]);\n  };\n\n  const removeEducationField = (index) => {\n    const newEducations = educations.filter((_, i) => i !== index);\n    setEducations(newEducations);\n    validateFields(newEducations);\n    appsmith.updateModel({ educations: newEducations });\n  };\n\n  return (\n    <div className=\"education-form\">\n      <h3>Education</h3>\n      {educations.map((education, index) => (\n        <div key={index} className=\"education-field\">\n          <div className=\"remove-education-button\" onClick={() => removeEducationField(index)}>-</div>\n          <div className=\"row1 education-row\">\n            <input\n              type=\"text\"\n              name=\"school\"\n              className=\"school\"\n              placeholder=\"School/University\"\n              value={education.school}\n              onChange={(event) => handleInstitutionInput(index, event)}\n            />\n            {filteredInstitutions.length > 0 && (\n              <ul className=\"autocomplete-suggestions\">\n                {filteredInstitutions.map((inst, i) => (\n                  <li key={i} onClick={() => selectInstitution(index, inst)}>{inst}</li>\n                ))}\n              </ul>\n            )}\n            <input\n              type=\"text\"\n              name=\"degree\"\n              className=\"degree\"\n              placeholder=\"Degree\"\n              value={education.degree}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n            <input\n              type=\"text\"\n              name=\"specialization\"\n              className=\"specialization\"\n              placeholder=\"Specialization\"\n              value={education.specialization}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n          </div>\n          <div className=\"row2 education-row\">\n            <input\n              type=\"month\"\n              name=\"startdate\"\n              className=\"date-started\"\n              placeholder=\"Date Started\"\n              value={education.startdate}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n            <input\n              type=\"month\"\n              name=\"enddate\"\n              className=\"date-ended\"\n              placeholder=\"Date Ended\"\n              value={education.enddate}\n              onChange={(event) => handleInputChange(index, event)}\n              disabled={education.currentlyPursuing}\n            />\n            <input\n              type=\"text\"\n              name=\"marks\"\n              className=\"marks\"\n              placeholder=\"Marks\"\n              value={education.marks}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n          </div>\n          <div className=\"currently-pursuing\">\n            <input\n              type=\"checkbox\"\n              name=\"currentlyPursuing\"\n              checked={education.currentlyPursuing}\n              onChange={(event) => handleInputChange(index, event)}\n            />\n            <label>Currently Pursuing</label>\n          </div>\n        </div>\n      ))}\n      <div className={\"add-education-button ${!validateFields(educations) ? 'disabled' : ''}\"} onClick={addEducationField}>Add Another</div>\n    </div>\n  );\n}\n\nreactDom.render(<EducationForm />, document.getElementById(\"root\"));\n});\n"
  },
  "version": 1,
  "widgetId": "pp9hj7031o",
  "widgetName": "educationWidget"
}