{
  "approveUser": "{{userApproved.run().then(() => {});}}",
  "backgroundColor": "#FFFFFF",
  "borderColor": "#E0DEDE",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "1",
  "bottomRow": 31,
  "boxShadow": "none",
  "defaultModel": "{{\nusersJSObject.usersData.data\n}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [
    {
      "key": "showPopUp"
    },
    {
      "key": "approveUser"
    },
    {
      "key": "rejectUser"
    }
  ],
  "events": [
    "showPopUp",
    "approveUser",
    "rejectUser"
  ],
  "hideCard": false,
  "iconSVG": "/static/media/icon.9b1065660dedd39cf997e3faa42244bc.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "kf1vvilwh2",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 49,
  "mobileLeftColumn": 3,
  "mobileRightColumn": 26,
  "mobileTopRow": 19,
  "needsErrorInfo": false,
  "onCanvasUI": {
    "disableParentSelection": false,
    "focusBGCSSVar": "--on-canvas-ui-widget-focus",
    "focusColorCSSVar": "--on-canvas-ui-widget-selection",
    "selectionBGCSSVar": "--on-canvas-ui-widget-selection",
    "selectionColorCSSVar": "--on-canvas-ui-widget-focus"
  },
  "originalBottomRow": 30,
  "originalTopRow": 23,
  "parentColumnSpace": 19.8125,
  "parentId": "0",
  "parentRowSpace": 10,
  "rejectUser": "{{userRejected.run().then(() => {});}}",
  "renderMode": "CANVAS",
  "rightColumn": 63,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "showPopUp": "{{showModal(CandidateDetailModel.name);}}",
  "srcDoc": {
    "css": ".user-cards {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 20px;\n  justify-content: center;\n}\n\n.user-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between; /* Distribute space between items */\n  width: 250px;\n  text-align: center;\n  border-radius: 10px;\n  overflow: hidden;\n  transition: transform 0.3s, box-shadow 0.3s;\n}\n\n.user-card:hover {\n  transform: translateY(-10px);\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n}\n\n.user-image img {\n  width: 100%;\n  height: auto;\n  border-bottom: 1px solid #ddd;\n}\n\n.user-info {\n  padding: 10px;\n}\n\n.user-details {\n  margin-top: 10px;\n  font-size: 14px;\n  color: #555;\n}\n\n.separator {\n  border-top: 1px solid #ddd;\n  margin: 10px 0;\n}\n\n.button-container {\n  text-align: right;\n  padding: 0px 0px;\n}\n.button-container button {\n  margin: 0 7px;\n  border-radius: 50px !important;\n  font-size: 14px;\n  transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n}\n.button-container button.ant-btn-primary {\n  background-color: green !important;\n  border: none !important;\n  color: #fff !important;\n}\n.button-container button.ant-btn-primary:hover {\n  background-color: darkgreen !important;\n}\n.button-container button.ant-btn-danger {\n  background-color: red !important;\n  border: none !important;\n  color: #fff !important;\n}\n.button-container button.ant-btn-danger:hover {\n  background-color: darkred !important;\n}\n\n.loading-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 1000;\n}\n\n.ant-spin {\n  color: #4caf50; /* Green color for the spinner */\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Card, Button, Spin } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport { Tooltip } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nappsmith.onReady(() => {\n  function truncateText(text, wordLimit) {\n    const words = text.split(' ');\n    if (words.length <= wordLimit) {\n      return text;\n    }\n    return words.slice(0, wordLimit).join(' ') + '...';\n  }\n  function App() {\n    const [users, setUsers] = React.useState([]);\n    const [loading, setLoading] = React.useState(true);\n    React.useEffect(() => {\n      async function fetchData() {\n        try {\n          setLoading(true); // Keep loading true until the fetch is completed\n\n          // Fetch data (realistic delay simulation)\n          const data = await new Promise(resolve => setTimeout(() => resolve(appsmith.model.users), 500));\n          setUsers(data); // Update state with fetched users\n        } catch (error) {\n          console.error('Failed to fetch data', error);\n        } finally {\n          setLoading(false); // Only stop loading after data is fetched\n        }\n      }\n      fetchData(); // Fetch data once on mount\n    }, []);\n    const handleCardClick = user => {\n      appsmith.updateModel({\n        selectedUser: user\n      });\n      appsmith.triggerEvent(\"showPopUp\");\n    };\n    const handleApprove = async user => {\n      appsmith.updateModel({\n        selectedUser: user\n      });\n      await appsmith.triggerEvent(\"approveUser\");\n      setUsers(prevUsers => prevUsers.filter(u => u !== user));\n    };\n    const handleReject = async user => {\n      appsmith.updateModel({\n        selectedUser: user\n      });\n      await appsmith.triggerEvent(\"rejectUser\");\n      setUsers(prevUsers => prevUsers.filter(u => u !== user));\n    };\n    if (loading) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"loading-container\"\n      }, /*#__PURE__*/React.createElement(Spin, {\n        size: \"large\",\n        tip: \"Loading users...\"\n      }), \" \"); // Display loading spinner\n    }\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-cards\"\n    }, users.length === 0 ? /*#__PURE__*/React.createElement(\"p\", null, \"No users found\") // Handle the case when no users are available\n    : users.map((user, index) => /*#__PURE__*/React.createElement(Card, {\n      key: index,\n      className: \"user-card\",\n      style: {\n        backgroundColor: '#f0f2f5',\n        boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)'\n      },\n      onClick: () => handleCardClick(user)\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-image\"\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: user.profile_image,\n      alt: `${user.name}'s image`\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-info\"\n    }, /*#__PURE__*/React.createElement(\"h2\", null, user.profile_name), /*#__PURE__*/React.createElement(\"h3\", null, user.role), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-details\"\n    }, /*#__PURE__*/React.createElement(\"p\", null, user.phoneno), /*#__PURE__*/React.createElement(\"p\", null, user.email), /*#__PURE__*/React.createElement(\"p\", null, user.location), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"separator\"\n    }), /*#__PURE__*/React.createElement(\"p\", null, truncateText(user.about, 10)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"separator\"\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button-container\"\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"primary\",\n      onClick: e => {\n        e.stopPropagation();\n        handleApprove(user);\n      },\n      disabled: user.community_id === \"\"\n    }, \"Approve\"), /*#__PURE__*/React.createElement(Button, {\n      type: \"danger\",\n      onClick: e => {\n        e.stopPropagation();\n        handleReject(user);\n      }\n    }, \"Reject\")))))));\n  }\n  reactDom.render( /*#__PURE__*/React.createElement(App, null), document.getElementById(\"root\"));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 23,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".user-cards {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 20px;\n  padding: 20px;\n  justify-content: center;\n}\n\n.user-card {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between; /* Distribute space between items */\n  width: 250px;\n  text-align: center;\n  border-radius: 10px;\n  overflow: hidden;\n  transition: transform 0.3s, box-shadow 0.3s;\n}\n\n.user-card:hover {\n  transform: translateY(-10px);\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n}\n\n.user-image img {\n  width: 100%;\n  height: auto;\n  border-bottom: 1px solid #ddd;\n}\n\n.user-info {\n  padding: 10px;\n}\n\n.user-details {\n  margin-top: 10px;\n  font-size: 14px;\n  color: #555;\n}\n\n.separator {\n  border-top: 1px solid #ddd;\n  margin: 10px 0;\n}\n\n.button-container {\n  text-align: right;\n  padding: 0px 0px;\n\t\n\n  button {\n    margin: 0 7px;\n    border-radius: 50px !important; \n    font-size: 14px;\n    transition: background-color 0.3s ease, border-color 0.3s ease, color 0.3s ease;\n\n    &.ant-btn-primary {\n      background-color: green !important;\n      border: none !important;\n      color: #fff !important;\n\n      &:hover {\n        background-color: darkgreen !important;\n      }\n    }\n\n    &.ant-btn-danger {\n      background-color: red !important;\n      border: none !important;\n      color: #fff !important;\n\n      &:hover {\n        background-color: darkred !important;\n      }\n    }\n  }\n}\n\n\n.loading-container {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.8);\n  z-index: 1000;\n}\n\n.ant-spin {\n  color: #4caf50; /* Green color for the spinner */\n}\n\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nimport { Card, Button, Spin } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\nimport { Tooltip } from 'https://cdn.jsdelivr.net/npm/antd@5.11.1/+esm';\n\nappsmith.onReady(() => {\n\n  function truncateText(text, wordLimit) {\n    const words = text.split(' ');\n    if (words.length <= wordLimit) {\n      return text;\n    }\n    return words.slice(0, wordLimit).join(' ') + '...';\n  }\n\n\n  function App() {\n    const [users, setUsers] = React.useState([]);\n    const [loading, setLoading] = React.useState(true);\n\t\n\t\t\n    React.useEffect(() => {\n      async function fetchData() {\n        try {\n          setLoading(true);  // Keep loading true until the fetch is completed\n          \n          // Fetch data (realistic delay simulation)\n          const data = await new Promise((resolve) =>\n            setTimeout(() => resolve(appsmith.model.users), 500)\n          );\n\n          setUsers(data);  // Update state with fetched users\n        } catch (error) {\n          console.error('Failed to fetch data', error);\n        } finally {\n          setLoading(false);  // Only stop loading after data is fetched\n        }\n      }\n\n      fetchData(); // Fetch data once on mount\n    }, []);\n\n    const handleCardClick = (user) => {\n      appsmith.updateModel({ selectedUser: user });\n      appsmith.triggerEvent(\"showPopUp\");\n    };\n\n    const handleApprove = async (user) => {\n      appsmith.updateModel({ selectedUser: user });\n      await appsmith.triggerEvent(\"approveUser\");\n      setUsers((prevUsers) => prevUsers.filter((u) => u !== user));\n    };\n\n    const handleReject = async (user) => {\n      appsmith.updateModel({ selectedUser: user });\n      await appsmith.triggerEvent(\"rejectUser\");\n      setUsers((prevUsers) => prevUsers.filter((u) => u !== user));\n    };\n\n    if (loading) {\n      return (\n        <div className=\"loading-container\">\n          <Spin size=\"large\" tip=\"Loading users...\" /> {/* Updated spinner with a tip */}\n        </div>\n      ); // Display loading spinner\n    }\n\n    return (\n      <div className=\"user-cards\">\n        {users.length === 0 ? (\n          <p>No users found</p>  // Handle the case when no users are available\n        ) : (\n          users.map((user, index) => (\n            <Card\n              key={index}\n              className=\"user-card\"\n              style={{ backgroundColor: '#f0f2f5', boxShadow: '0 4px 8px rgba(0, 0, 0, 0.1)' }}\n              onClick={() => handleCardClick(user)}\n            >\n              <div className=\"user-image\">\n                <img src={user.profile_image} alt={`${user.name}'s image`} />\n              </div>\n              <div className=\"user-info\">\n                <h2>{user.profile_name}</h2>\n                <h3>{user.role}</h3>\n                <div className=\"user-details\">\n                  <p>{user.phoneno}</p>\n                  <p>{user.email}</p>\n                  <p>{user.location}</p>\n                  <div className=\"separator\"></div>\n                  <p>{truncateText(user.about, 10)}</p>\n                  <div className=\"separator\"></div>\n                  <div className=\"button-container\">\n                    <Button\n                      type=\"primary\"\n                      onClick={(e) => { e.stopPropagation(); handleApprove(user); }}\n                      disabled={user.community_id === \"\"}\n                    >\n                      Approve\n                    </Button>\n                    <Button\n                      type=\"danger\"\n                      onClick={(e) => { e.stopPropagation(); handleReject(user); }}\n                    >\n                      Reject\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </Card>\n          ))\n        )}\n      </div>\n    );\n  }\n  reactDom.render(<App />, document.getElementById(\"root\"));\n});\n\n"
  },
  "version": 1,
  "widgetId": "seryp1goc1",
  "widgetName": "usersList"
}