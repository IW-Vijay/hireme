{
  "backgroundColor": "#FFFFFF",
  "borderColor": "#b91c1c",
  "borderRadius": "{{appsmith.theme.borderRadius.appBorderRadius}}",
  "borderWidth": "0",
  "bottomRow": 118,
  "boxShadow": "none",
  "defaultModel": "{{getWorkexsJSObject.workexData.data}}",
  "displayName": "Custom",
  "dynamicBindingPathList": [
    {
      "key": "theme"
    },
    {
      "key": "borderRadius"
    },
    {
      "key": "defaultModel"
    }
  ],
  "dynamicHeight": "AUTO_HEIGHT",
  "dynamicPropertyPathList": [],
  "dynamicTriggerPathList": [],
  "events": [],
  "hideCard": false,
  "iconSVG": "/static/media/icon.9b1065660dedd39cf997e3faa42244bc.svg",
  "isCanvas": false,
  "isDeprecated": false,
  "isLoading": false,
  "isSearchWildcard": true,
  "isVisible": true,
  "key": "uhy8eixu17",
  "leftColumn": 1,
  "maxDynamicHeight": 9000,
  "minDynamicHeight": 4,
  "mobileBottomRow": 68,
  "mobileLeftColumn": 30,
  "mobileRightColumn": 53,
  "mobileTopRow": 38,
  "needsErrorInfo": false,
  "onCanvasUI": {
    "disableParentSelection": false,
    "focusBGCSSVar": "--on-canvas-ui-widget-focus",
    "focusColorCSSVar": "--on-canvas-ui-widget-selection",
    "selectionBGCSSVar": "--on-canvas-ui-widget-selection",
    "selectionColorCSSVar": "--on-canvas-ui-widget-focus"
  },
  "originalBottomRow": 118,
  "originalTopRow": 98,
  "parentColumnSpace": 18.880859375,
  "parentId": "hnice2rhm7",
  "parentRowSpace": 10,
  "renderMode": "CANVAS",
  "rightColumn": 64,
  "searchTags": [
    "external"
  ],
  "shouldScrollContents": true,
  "srcDoc": {
    "css": ".work-experience-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  overflow: hidden;\n}\n\n.work-experience-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.work-experience-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input,\n.row1 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.organisation {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.role {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input,\n.row2 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.start-date,\n.row2 input.end-date {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.skills {\n  flex: 2;\n  font-size: 14px;\n}\n\n.remove-work-experience-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-125%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-work-experience-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-125%) scale(1.1);\n}\n\n.add-work-experience-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #1E1E1E;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-work-experience-button:hover {\n  background-color: #1E1E1E;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n.autocomplete-list {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 97%;\n  overflow-y: auto;\n  position: absolute;\n  top: 75%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-list li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-list li:hover {\n  background-color: #f0f0f0;\n}\n\n.workex-tabs {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n\n.tab-button {\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f0f0f0;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.3s ease;\n}\n\n.tab-button.active {\n  background-color: #71717a;\n  color: white;\n}\n\n.child-tab-button {\n  padding: 4px 8px; /* Reduced padding for a smaller tab */\n  cursor: pointer;\n  background-color: #e0e0e0; /* Light gray for child tabs */\n  border: none; /* No border to match parent tab style */\n  border-radius: 5px; /* Same border radius */\n  margin-left: 8px; /* Space between child tabs */\n  transition: background-color 0.3s ease; /* Smooth transition */\n  font-size: 12px; /* Smaller font size for child tabs */\n  line-height: 1.2; /* Adjust line height for better alignment */\n  max-width: fit-content; /* Ensures button width fits content */\n}\n\n.child-tab-button.active {\n  background-color: #71717a; /* Same active color as parent tabs */\n  color: white; /* White text for active child tab */\n}",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "import React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\nappsmith.onReady(function () {\n  function WorkExperienceForm() {\n    const [workExperiences, setWorkExperiences] = useState([{\n      organization_id: '',\n      organization_name: '',\n      position: '',\n      type: 'full-time',\n      start_date: '',\n      end_date: '',\n      skills: '',\n      currently_working: false,\n      institution_id: null,\n      isInstitute: false,\n      isSchool: true\n    }]);\n    const [errors, setErrors] = useState([]);\n    const [organizationSuggestions, setOrganizationSuggestions] = useState([]);\n    const [focusedIndex, setFocusedIndex] = useState(null); // Keep track of the currently focused field\n\n    useEffect(() => {\n      const fetchData = () => {\n        const initialWorkexs = appsmith.model.workexs || [];\n        if (initialWorkexs.length) {\n          const formattedWorkexs = initialWorkexs.map(workex => ({\n            organization_id: workex.organization_id || '',\n            organization_name: workex.organization_name || '',\n            position: workex.position || '',\n            type: workex.type || 'full-time',\n            start_date: workex.start_date || '',\n            end_date: workex.end_date || '',\n            skills: workex.skills || '',\n            currently_working: workex.currently_working,\n            institution_id: workex.institution_id,\n            isInstitute: workex.institution_id ? true : false,\n            isSchool: workex.institution_id ? (appsmith.model.institutions.find(inst => inst.institution_id === workex.institution_id) || {}).isschool || false : false\n          }));\n          setWorkExperiences(formattedWorkexs);\n        } else {\n          setTimeout(fetchData, 500);\n        }\n      };\n      fetchData();\n    }, []);\n\n    // Function to fetch organizations based on user input\n    const fetchOrganizations = async input => {\n      const organizations = appsmith.model.organizations.filter(org => !org.institution_id).map(org => ({\n        organization_id: org.organization_id,\n        name: org.name,\n        institution_id: org.institution_id\n      })) || [];\n      const filteredOrganizations = organizations.filter(org => org.name.toLowerCase().includes(input.toLowerCase()));\n      setOrganizationSuggestions(filteredOrganizations);\n    };\n    const fetchSchools = async input => {\n      const institutions = appsmith.model.institutions.filter(inst => inst.isschool).map(inst => ({\n        institution_id: inst.institution_id,\n        name: inst.name\n      })) || [];\n      const filteredInstitutions = institutions.filter(inst => inst.name.toLowerCase().includes(input.toLowerCase()));\n      setOrganizationSuggestions(filteredInstitutions);\n    };\n    const fetchUnis = async input => {\n      const institutions = appsmith.model.institutions.filter(inst => !inst.isschool).map(inst => ({\n        institution_id: inst.institution_id,\n        name: inst.name\n      })) || [];\n      const filteredInstitutions = institutions.filter(inst => inst.name.toLowerCase().includes(input.toLowerCase()));\n      setOrganizationSuggestions(filteredInstitutions);\n    };\n    const validateFields = workExperiences => {\n      const newErrors = workExperiences.map(workExperience => {\n        let errors = {};\n        if (!workExperience.organization_name) errors.organization_name = 'organization name cannot be empty';\n        if (!workExperience.position) errors.position = 'Role cannot be empty';\n        return errors;\n      });\n      setErrors(newErrors);\n      return !newErrors.some(error => Object.keys(error).length > 0);\n    };\n    const handleInputChange = (index, event) => {\n      const {\n        name,\n        value,\n        type,\n        checked\n      } = event.target;\n      const newWorkExperiences = [...workExperiences];\n      newWorkExperiences[index][name] = type === 'checkbox' ? checked : value;\n      setWorkExperiences(newWorkExperiences);\n      if (name === 'organization_name') {\n        newWorkExperiences[index].institution_id = null;\n        newWorkExperiences[index].organization_id = '';\n        newWorkExperiences[index].currently_working = newWorkExperiences[index].currently_working;\n        setFocusedIndex(index); // Set the index of the current focused input field\n        //fetchOrganizations(value); \n        if (!newWorkExperiences[index].isInstitute) {\n          fetchOrganizations(value); // Fetch schools when isSchool is true\n        } else if (newWorkExperiences[index].isSchool) {\n          fetchSchools(value);\n        } else {\n          fetchUnis(value);\n        }\n      } else {\n        setOrganizationSuggestions([]); // Clear suggestions if not editing organization\n      }\n      validateFields(newWorkExperiences);\n      appsmith.updateModel({\n        workexs: newWorkExperiences\n      });\n    };\n    const handleTabChange = (index, isinstitute) => {\n      const newWorkExperiences = [...workExperiences];\n      setOrganizationSuggestions([]);\n      newWorkExperiences[index].institution_id = null;\n      newWorkExperiences[index].organization_id = '';\n      newWorkExperiences[index].organization_name = '';\n      newWorkExperiences[index].isInstitute = isinstitute;\n      setWorkExperiences(newWorkExperiences);\n      appsmith.updateModel({\n        workexs: newWorkExperiences\n      }); // Update model when tab is changed\n    };\n    const handleInstitutionTypeChange = (index, type) => {\n      const newWorkExperiences = [...workExperiences];\n      setOrganizationSuggestions([]);\n      newWorkExperiences[index].institution_id = null;\n      newWorkExperiences[index].organization_id = '';\n      newWorkExperiences[index].organization_name = '';\n      newWorkExperiences[index].isSchool = type;\n      setWorkExperiences(newWorkExperiences);\n      appsmith.updateModel({\n        workexs: newWorkExperiences\n      });\n    };\n    const addWorkExperienceField = () => {\n      if (!validateFields(workExperiences)) {\n        alert('Fill all the information before adding new experience.');\n        return;\n      }\n      setWorkExperiences([...workExperiences, {\n        organization_id: '',\n        organization_name: '',\n        position: '',\n        type: 'full-time',\n        start_date: '',\n        end_date: '',\n        skills: '',\n        currently_working: false,\n        institution_id: null,\n        isInstitute: false,\n        isSchool: true\n      }]);\n    };\n    const removeWorkExperienceField = index => {\n      const newWorkExperiences = workExperiences.filter((_, i) => i !== index);\n      setWorkExperiences(newWorkExperiences);\n      appsmith.updateModel({\n        workexs: newWorkExperiences\n      });\n    };\n    const handleOrganizationSelect = (index, organizationName, institutionId, organizationId) => {\n      const newWorkExperiences = [...workExperiences];\n      newWorkExperiences[index].organization_name = organizationName;\n      newWorkExperiences[index].institution_id = institutionId;\n      newWorkExperiences[index].organization_id = organizationId ? organizationId : '';\n      setWorkExperiences(newWorkExperiences);\n      appsmith.updateModel({\n        workexs: newWorkExperiences\n      });\n      setOrganizationSuggestions([]); // Clear suggestions after selection\n      setFocusedIndex(null); // Clear the focused index after selection\n    };\n    const handleBlur = (index, event) => {\n      setTimeout(() => {\n        if (focusedIndex === index) {\n          setOrganizationSuggestions([]); // Clear suggestions when focus is lost\n        }\n      }, 100); // Delay for allowing selection before blur happens\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"work-experience-form\"\n    }, /*#__PURE__*/React.createElement(\"h3\", null, \"Work Experience\"), workExperiences.map((experience, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      className: \"work-experience-field\"\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"remove-work-experience-button\",\n      onClick: () => removeWorkExperienceField(index)\n    }, \"-\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"workex-tabs\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: `tab-button ${!experience.isInstitute ? 'active' : ''}`,\n      onClick: () => {\n        handleTabChange(index, false), handleInputChange(index, event);\n      }\n    }, \"Company\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: `tab-button ${experience.isInstitute ? 'active' : ''}`,\n      onClick: () => {\n        handleTabChange(index, true), handleInputChange(index, event);\n      }\n    }, \"Institution\"), experience.isInstitute && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      className: `child-tab-button ${experience.isSchool ? 'active' : ''}`,\n      onClick: () => handleInstitutionTypeChange(index, true)\n    }, \"School\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: `child-tab-button ${!experience.isSchool ? 'active' : ''}`,\n      onClick: () => handleInstitutionTypeChange(index, false)\n    }, \"University\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row1 work-experience-row\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"organization_name\",\n      className: \"organisation\",\n      placeholder: experience.isInstitute ? \"Institution\" : \"Organization\",\n      value: experience.organization_name,\n      onChange: event => handleInputChange(index, event),\n      onFocus: () => setFocusedIndex(index) // Set the focus when the user starts editing\n      ,\n      onBlur: event => handleBlur(index, event)\n    }), organizationSuggestions.length > 0 && focusedIndex === index && /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"autocomplete-list\"\n    }, organizationSuggestions.map(org => /*#__PURE__*/React.createElement(\"li\", {\n      key: org.organization_id,\n      onClick: () => handleOrganizationSelect(index, org.name, org.institution_id, org.organization_id)\n    }, org.name))), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"position\",\n      className: \"role\",\n      placeholder: \"Role\",\n      value: experience.position,\n      onChange: event => handleInputChange(index, event)\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"currently-working\"\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"currently_working\",\n      checked: experience.currently_working,\n      onChange: event => handleInputChange(index, event)\n    }), /*#__PURE__*/React.createElement(\"label\", null, \"Currently Working Here\")))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"add-work-experience-button\",\n      onClick: addWorkExperienceField\n    }, \"Add Another\"));\n  }\n  reactDom.render( /*#__PURE__*/React.createElement(WorkExperienceForm, null), document.getElementById('root'));\n});"
  },
  "tags": [
    "Display"
  ],
  "theme": "{{appsmith.theme}}",
  "thumbnailSVG": "/static/media/thumbnail.a7d7cde44fad9a0d4d490def43560a78.svg",
  "topRow": 98,
  "type": "CUSTOM_WIDGET",
  "uncompiledSrcDoc": {
    "css": ".work-experience-form {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n\toverflow : hidden;\n}\n\n.work-experience-field {\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  position: relative;\n  padding-right: 50px; /* Space for the remove button */\n}\n\n.work-experience-row {\n  display: flex;\n  gap: 10px;\n}\n\n.row1 input,\n.row1 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row1 input.organisation {\n  flex: 2;\n  font-size: 16px;\n}\n\n.row1 input.role {\n  flex: 1.5;\n  font-size: 14px;\n}\n\n.row2 input,\n.row2 select {\n  padding: 10px;\n  border-radius: 5px;\n  border: 1px solid #ddd;\n}\n\n.row2 input.start-date,\n.row2 input.end-date {\n  flex: 1;\n  font-size: 14px;\n}\n\n.row2 input.skills {\n  flex: 2;\n  font-size: 14px;\n}\n\n.remove-work-experience-button {\n  position: absolute;\n  right: 10px; /* Space from the right edge */\n  top: 50%; /* Center vertically */\n  transform: translateY(-125%); /* Center vertically */\n  width: 24px;\n  height: 24px;\n  background-color: #ff4d4f;\n  color: white;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  z-index: 1; /* Ensure it's above other content */\n}\n\n.remove-work-experience-button:hover {\n  background-color: #d9363e;\n  transform: translateY(-125%) scale(1.1);\n}\n\n\n.add-work-experience-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: #1E1E1E;\n  color: white;\n  padding: 8px 12px; /* Smaller padding */\n  border-radius: 5px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n  width: 150px; /* Set a fixed width for the button */\n  text-align: center; /* Center text inside the button */\n  margin: 0 auto; /* Center the button horizontally */\n}\n\n.add-work-experience-button:hover {\n  background-color:#1E1E1E;\n  transform: scale(1.02); /* Slightly increase the size on hover */\n}\n\n\n\n\n.autocomplete-list {\n  border: 1px solid #ddd;\n  background-color: #fff;\n  max-height: 97%;\n  overflow-y: auto;\n  position: absolute;\n  top: 75%; /* Position dropdown directly below the text field */\n  left: 0;\n  width: 87%; /* Ensure dropdown matches the width of the text field */\n  z-index: 1000;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n}\n\n.autocomplete-list li {\n  padding: 8px;\n  cursor: pointer;\n}\n\n.autocomplete-list li:hover {\n  background-color: #f0f0f0;\n}\n\n\n\n\n\n.workex-tabs {\n  display: flex;\n  justify-content: center;\n  gap: 10px;\n  margin-bottom: 10px;\n}\n\n.tab-button {\n  padding: 8px 12px;\n  cursor: pointer;\n  background-color: #f0f0f0;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.3s ease;\n}\n\n.tab-button.active {\n  background-color: #71717a;\n  color: white;\n}\n\n\n\n\n\n\n.child-tab-button {\n  padding: 4px 8px; /* Reduced padding for a smaller tab */\n  cursor: pointer;\n  background-color: #e0e0e0; /* Light gray for child tabs */\n  border: none; /* No border to match parent tab style */\n  border-radius: 5px; /* Same border radius */\n  margin-left: 8px; /* Space between child tabs */\n  transition: background-color 0.3s ease; /* Smooth transition */\n  font-size: 12px; /* Smaller font size for child tabs */\n  line-height: 1.2; /* Adjust line height for better alignment */\n  max-width: fit-content; /* Ensures button width fits content */\n}\n\n.child-tab-button.active {\n  background-color: #71717a; /* Same active color as parent tabs */\n  color: white; /* White text for active child tab */\n}\n\n\n\n",
    "html": "<!-- no need to write html, head, body tags, it is handled by the widget -->\n<div id=\"root\"></div>\n",
    "js": "\n\nimport React, { useState, useEffect } from 'https://cdn.jsdelivr.net/npm/react@18.2.0/+esm';\nimport reactDom from 'https://cdn.jsdelivr.net/npm/react-dom@18.2.0/+esm';\n\nappsmith.onReady(function () {\n  function WorkExperienceForm() {\n    const [workExperiences, setWorkExperiences] = useState([\n      {\n\t\t\t\torganization_id: '',\n        organization_name: '',\n        position: '',\n        type: 'full-time',\n        start_date: '',\n        end_date: '',\n        skills: '',\n        currently_working: false,\n\t\t\t\tinstitution_id : null,\n\t\t\t\tisInstitute : false,\n\t\t\t\tisSchool : true\n      },\n    ]);\n    const [errors, setErrors] = useState([]);\n    const [organizationSuggestions, setOrganizationSuggestions] = useState([]);\n    const [focusedIndex, setFocusedIndex] = useState(null); // Keep track of the currently focused field\n\n    useEffect(() => {\n      const fetchData = () => {\n        const initialWorkexs = appsmith.model.workexs || [];\n        if (initialWorkexs.length) {\n          const formattedWorkexs = initialWorkexs.map((workex) => ({\n\t\t\t\t\t\torganization_id: workex.organization_id || '',\n            organization_name: workex.organization_name || '',\n            position: workex.position || '',\n            type: workex.type || 'full-time',\n            start_date: workex.start_date || '',\n            end_date: workex.end_date || '',\n            skills: workex.skills || '',\n            currently_working: workex.currently_working,\n\t\t\t\t\t\tinstitution_id : workex.institution_id,\n\t\t\t\t\t\tisInstitute : workex.institution_id ? true : false,\n\t\t\t\t\t\tisSchool: workex.institution_id ? (appsmith.model.institutions.find(inst => inst.institution_id === workex.institution_id) || {}).isschool || false \n    : false\n\t\t\t\t\t\t\n          }));\n          setWorkExperiences(formattedWorkexs);\n        } else {\n          setTimeout(fetchData, 500);\n        }\n      };\n\n      fetchData();\n    }, []);\n\n    // Function to fetch organizations based on user input\n    const fetchOrganizations = async (input) => {\n      const organizations = appsmith.model.organizations.filter((org) => !org.institution_id).map(org => ({ organization_id: org.organization_id, name: org.name, institution_id : org.institution_id })) || [];\n      const filteredOrganizations = organizations.filter((org) =>\n        org.name.toLowerCase().includes(input.toLowerCase())\n      );\n      setOrganizationSuggestions(filteredOrganizations);\n    };\n\t\t\n\t\t\n\t\tconst fetchSchools = async (input) => {\n      const institutions = appsmith.model.institutions.filter((inst => inst.isschool)).map(inst => ({ institution_id: inst.institution_id, name: inst.name})) || [];\n      const filteredInstitutions = institutions.filter((inst) =>\n        inst.name.toLowerCase().includes(input.toLowerCase())\n      );\n      setOrganizationSuggestions(filteredInstitutions);\n    };\n\t\t\n\t\tconst fetchUnis = async (input) => {\n      const institutions = appsmith.model.institutions.filter((inst => !inst.isschool)).map(inst => ({ institution_id: inst.institution_id, name: inst.name})) || [];\n      const filteredInstitutions = institutions.filter((inst) =>\n        inst.name.toLowerCase().includes(input.toLowerCase())\n      );\n      setOrganizationSuggestions(filteredInstitutions);\n    };\n\n    const validateFields = (workExperiences) => {\n      const newErrors = workExperiences.map((workExperience) => {\n        let errors = {};\n        if (!workExperience.organization_name)\n          errors.organization_name = 'organization name cannot be empty';\n        if (!workExperience.position) errors.position = 'Role cannot be empty';\n        return errors;\n      });\n      setErrors(newErrors);\n      return !newErrors.some((error) => Object.keys(error).length > 0);\n    };\n\n    const handleInputChange = (index, event) => {\n      const { name, value, type, checked } = event.target;\n      const newWorkExperiences = [...workExperiences];\n      newWorkExperiences[index][name] = type === 'checkbox' ? checked : value;\n      setWorkExperiences(newWorkExperiences);\n\n      if (name === 'organization_name') {\n\t\t\t\tnewWorkExperiences[index].institution_id = null;\n\t\t\t\tnewWorkExperiences[index].organization_id = '';\n\t\t\t\tnewWorkExperiences[index].currently_working = newWorkExperiences[index].currently_working;\n        setFocusedIndex(index); // Set the index of the current focused input field\n        //fetchOrganizations(value); \n\t\t\t\tif (!newWorkExperiences[index].isInstitute) {\n\t\t\t\t\tfetchOrganizations(value); // Fetch schools when isSchool is true\n\t\t\t\t} else if (newWorkExperiences[index].isSchool) {\n\t\t\t\t\tfetchSchools(value); \n\t\t\t\t} else {\n\t\t\t\t\tfetchUnis(value);\n\t\t\t\t}\n      } else {\n        setOrganizationSuggestions([]); // Clear suggestions if not editing organization\n      }\n\n      validateFields(newWorkExperiences);\n      appsmith.updateModel({ workexs: newWorkExperiences });\n    };\n\t\t\n\t\tconst handleTabChange = (index, isinstitute) => {\n\t\t\tconst newWorkExperiences = [...workExperiences];\n\t\t\tsetOrganizationSuggestions([]);\n\t\t\tnewWorkExperiences[index].institution_id = null;\n\t\t\tnewWorkExperiences[index].organization_id = '';\n\t\t\tnewWorkExperiences[index].organization_name = '';\n\t\t\tnewWorkExperiences[index].isInstitute = isinstitute;\n\t\t\tsetWorkExperiences(newWorkExperiences);\n\t\t\tappsmith.updateModel({ workexs: newWorkExperiences }); // Update model when tab is changed\n\t\t};\n\t\t\n\t\t\n\t\tconst handleInstitutionTypeChange = (index, type) => {\n    const newWorkExperiences = [...workExperiences];\n\t\tsetOrganizationSuggestions([]);\n\t\tnewWorkExperiences[index].institution_id = null;\n\t\tnewWorkExperiences[index].organization_id = '';\n\t\tnewWorkExperiences[index].organization_name = '';\n    newWorkExperiences[index].isSchool = type;\n    setWorkExperiences(newWorkExperiences);\n    appsmith.updateModel({ workexs: newWorkExperiences });\n  };\n\t\t\n\n    const addWorkExperienceField = () => {\n      if (!validateFields(workExperiences)) {\n        alert('Fill all the information before adding new experience.');\n        return;\n      }\n      setWorkExperiences([\n        ...workExperiences,\n        {\n\t\t\t\t\torganization_id: '',\n          organization_name: '',\n          position: '',\n          type: 'full-time',\n          start_date: '',\n          end_date: '',\n          skills: '',\n          currently_working: false,\n\t\t\t\t\tinstitution_id : null,\n\t\t\t\t\tisInstitute : false,\n\t\t\t\t\tisSchool : true\n        },\n      ]);\n    };\n\n    const removeWorkExperienceField = (index) => {\n      const newWorkExperiences = workExperiences.filter((_, i) => i !== index);\n      setWorkExperiences(newWorkExperiences);\n      appsmith.updateModel({ workexs: newWorkExperiences });\n    };\n\n    const handleOrganizationSelect = (index, organizationName, institutionId,  organizationId) => {\n      const newWorkExperiences = [...workExperiences];\n      newWorkExperiences[index].organization_name = organizationName;\n\t\t\tnewWorkExperiences[index].institution_id = institutionId;\n\t\t\tnewWorkExperiences[index].organization_id = organizationId? organizationId : '';\n      setWorkExperiences(newWorkExperiences);\n      appsmith.updateModel({ workexs: newWorkExperiences });\n      setOrganizationSuggestions([]); // Clear suggestions after selection\n      setFocusedIndex(null); // Clear the focused index after selection\n    };\n\t\t\n\t\tconst handleBlur = (index, event) => {\n      setTimeout(() => {\n        if (focusedIndex === index) {\n          setOrganizationSuggestions([]); // Clear suggestions when focus is lost\n        }\n      }, 100); // Delay for allowing selection before blur happens\n    };\n\n    return (\n      <div className=\"work-experience-form\">\n        <h3>Work Experience</h3>\n        {workExperiences.map((experience, index) => (\n          <div key={index} className=\"work-experience-field\">\n            <div\n              className=\"remove-work-experience-button\"\n              onClick={() => removeWorkExperienceField(index)}\n            >\n              -\n            </div>\n\t\t\t\t\t\t\t\t \n\t\t\t\t\t\t{/* Tab navigation for each organization */}\n\t<div className=\"workex-tabs\">\n\t\t<button\n\tclassName={`tab-button ${!experience.isInstitute ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={() => {handleTabChange(index, false), handleInputChange(index, event)}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tCompany\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName={`tab-button ${experience.isInstitute ? 'active' : ''}`}\n\t\t\t\t\t\t\t\tonClick={() => {handleTabChange(index, true), handleInputChange(index, event)}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tInstitution\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t{/* Render additional tabs only if Institution is selected */}\n\t\t\t\t\t\t\t\t\t{experience.isInstitute && (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`child-tab-button ${experience.isSchool ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleInstitutionTypeChange(index, true)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tSchool\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={`child-tab-button ${!experience.isSchool ? 'active' : ''}`}\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleInstitutionTypeChange(index, false)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\tUniversity\n\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\n\t\t\t\t\t\t\n            <div className=\"row1 work-experience-row\">\n              <input\n                type=\"text\"\n                name=\"organization_name\"\n                className=\"organisation\"\n                placeholder= {experience.isInstitute ? \"Institution\" : \"Organization\"}\n                value={experience.organization_name}\n                onChange={(event) => handleInputChange(index, event)}\n                onFocus={() => setFocusedIndex(index)} // Set the focus when the user starts editing\n\t\t\t\t\t\t\t\tonBlur={(event) => handleBlur(index, event)}\n\t\t\t\t\t\t\t\t\n              />\n              {/* Organization Autocomplete Suggestions for the current focused field */}\n              {organizationSuggestions.length > 0 && focusedIndex === index && (\n                <ul className=\"autocomplete-list\">\n                  {organizationSuggestions.map((org) => (\n                    <li\n                      key={org.organization_id}\n                      onClick={() => handleOrganizationSelect(index, org.name, org.institution_id, org.organization_id)}\n                    >\n                      {org.name}\n                    </li>\n\t\t\t\t\t\t\t\t\t))}\n                </ul>\n              )}\n              <input\n                type=\"text\"\n                name=\"position\"\n                className=\"role\"\n                placeholder=\"Role\"\n                value={experience.position}\n                onChange={(event) => handleInputChange(index, event)}\n              />\n            </div>\n            \n            <div className=\"currently-working\">\n              <input\n                type=\"checkbox\"\n                name=\"currently_working\"\n                checked={experience.currently_working}\n                onChange={(event) => handleInputChange(index, event)}\n              />\n              <label>Currently Working Here</label>\n            </div>\n          </div>\n        ))}\n        <div\n          className=\"add-work-experience-button\"\n          onClick={addWorkExperienceField}\n        >\n          Add Another\n        </div>\n      </div>\n    );\n  }\n\n  reactDom.render(<WorkExperienceForm />, document.getElementById('root'));\n});\n"
  },
  "version": 1,
  "widgetId": "h12kkst2u9",
  "widgetName": "experienceWidget"
}